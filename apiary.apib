FORMAT: 1A
HOST: https://push.notifica.re/

# Notificare REST API
Unified remote push notifications and location services for iOS, Android and HTML5 apps. 
Create user profiles, categorize your users and devices, create/schedule any content-rich and actionable notification. 
Use Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate messaging experience. Sign up for free [here](https://dashboard.notifica.re/#/sign-up).
For more information about this API, please [contact us](http://notifica.re/contact).


# Group Account
Retrieve your account object. 
Includes the `token` that will be required to create and manage applications and get global stats about your account.


## /account/foremail/{email}

+ Parameters

    + email (required, string, `name@domain.com`)...The email used to register the account.


### GET
Retrieve an account object based on credentials. This request must be authenticated with the `email` and `password`.


+ Response 200 (application/json; charset=utf-8)

        {
                "account":{
                            "\_id":"5245bc5b3e66a3b01f0024d4"
                            "email":"john@doe.com",
                            "name":"John Doe",
                            "subscriptionId":"",
                            "token":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                            "firstTime":true,
                            "registrationDate":"2013-03-01T08:00:00.000Z",
                            "automaticUpgrade":false,
                            "subscription":false,
                            "superAccount":true,
                            "userLimit":5000,
                            "plan":"Free",
                            "accessWarning":false,
                            "blocked":false,
                            "active":true,
                            "billingInfo":{
                                            "company":"Notificare BV",
                                             "firstName":"John",
                                             "lastName":"Doe",
                                             "address1":"Overhoekslein 2",
                                             "address2":"",
                                             "city":"Amsterdam",
                                             "state":"Zuid-Holland",
                                             "country":"NL",
                                             "zipcode":"1031 KS",
                                             "phone":"0854014413",
                                             "vatNumber":"NL851989627B01",
                                             "billingCycle":"monthly"
                                   }
                             }
                }
        }


+ Response 404 (application/json; charset=utf-8)

        {
                "error":"account not found"
        }
        
+ Response 403 (application/json; charset=utf-8)

        {
                "error":"account inactive"
        }

# Group Application
Methods to manage your applications.

## /application{?limit,skip}

### GET
Get your active applications. This request must be authenticated with the `token`.

+ Parameters

    + limit = `250` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 201 (application/json; charset=utf-8)

        {
                "applications":[
                                 {
                                   "\_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "5245bc5b3e66a3b01f0024d4",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }
        


## /application

### POST
Create a new application. This request must be authenticated with the `token`.

+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "application":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }





## /application/{application}

### GET
Get an application object. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "application":{
                                   "\_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "xxxxxxxxxxx",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }





## /application/{application}

### PUT
Modify an application. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application changes saved"
        }



## /application/{application}

### DELETE
Destroy an application. This operation can not be undone. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.



+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application deactivated"
        }




# Group Beacon
Methods to manage your beacons. Be sure to add the `regionConfig.proximityUUID` in your Application and create a Region first.
Also beacons require that you create a triggered message previously.



## /beacon

### POST
Create a new beacon for a region. To complete this request you must create a triggered Notification first. 
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "beacon":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }





## /beacon/{beacon}

### GET
Get a beacon object.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "application":{
                                   "\_id":"5245bc5b3e66a3b01f0024d4",
                                   "notification":"6245bc5b3e66a3b01f0024d5",
                                   "name": "My Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        }





## /beacon/{beacon}

### PUT
Modify a beacon.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.

+ Request (application/json)

        {
                "notification":"12345",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon updated"
        }



## /beacon/{beacon}

### DELETE
Destroy a beacon. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon deleted"
        }



# Group Device
Methods to manage devices. 
Use these methods to retrieve information about devices for an application, for a specific user, for a specific tag or in a specific location.
Management of devices is exclusively made by our SDK libraries therefore you only get access to read operations.

## /device

### GET
Get all the devices for a specific application.
This request is authenticated with the `applicationKey` and  `applicationSecret`.



+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              },
                               {
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,"last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              }
                ],
                "count": 2
                          
        }



## /device/foruser/{user}

### GET
Get all the devices for a specific user.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              },
                               {
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,"last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              }
                ],
                "count": 2
                          
        }


## /device/fortag/{tag}

### GET
Get all the devices for a specific tag.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + tag (required, string, `toys`)...The tag the device is associated with


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              },
                               {
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              }
                ],
                "count": 2
                          
        }


## /device/bylocation/{latitude}/{longitude}/{distance}

### GET
Get all the devices in a specific location.
This request is authenticated with the `applicationKey` and  `applicationSecret`.



+ Parameters

    + latitude (required, float, `4.2345`)...The desired latitude
    + longitude (required, float, `5.6789`)...The desired longitude
    + distance (required, float, `63.76`)...The distance in meters of your search area relative to the latitude and longitude


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              },
                               {
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "app_version":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "device_id":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "os_string":"Mac OS X 10.9.2",
                                  "os_version":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdk_version":"0.0.1",
                                  "transport":"Websocket",
                                  "user_id":"info@notifica.re",
                                  "time_zone_offset":-5,
                                  "last_active":
                                  "2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "device_string":"MacIntel
                              }
                ],
                "count": 2
                          
        }





# Group Notification
Methods to create, send and schedule notifications to a specific target audience, user or device.
Combines User, Segments, Tags and the location of the devices to provide you a powerful device selection query for your campaigns.
The 3 most important things to have in consideration when creating a new message is that `message` is always mandatory, the property `type` defines which type of content should be presented to the user and the combination of `message`, `extra`, `sound`, `badge` should be no bigger than 200 bytes.
You can send several types of content in your message. The array `content` should contain one or more objects according to the `type` of message. 
You can also add an array `actions` to your notifications by simply providing one or more objects. 


## /notification/broadcast

### POST
Send a message to **all** devices. 
You can also schedule a broadcast, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## /notification/tags

### POST
Send a message to devices with any of the specified `tags`. 
You can also schedule this message, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of tags. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" false,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## /notification/segments

### POST
Send a message to users in one or more of the specified `segments`. 
You can also schedule this messages, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of Segment Ids. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## /notification/user/{user}

### POST
Send a message to a `user`. 
You can also schedule a private message, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" false,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## /notification/device/{device}

### POST
Send a message to a `device`. 
You can also schedule this type of messages, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        

## /notification/triggered

### POST
Create a message that will be not be sent by a Region/Trigger or Region/Beacon. 
You can not schedule a triggered message.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "triggered":true,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## /notification/schedule

### POST
Start a schedule task for a previously created message.
The property `local` determines if message should be sent on the device's local time or UTC.
If `local` is true make sure the `time` is at least 14 hours from now to make sure the message will arrive in all timezones.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "time":"2014-12-25T10:00:00",
                "local":true
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "schedule":{
                             "\_id":"5245bc5b3e66a3b01f0024d4"
                           }
        }

# Group Notification Test
Methods to test audience selection. Retrieves current devices based on the specified selection. It does not send any notification.
Combines User, Segments, Tags and the location of the devices the same way Notification does.

## /notification/test/broadcast

### POST
Test a message to **all** devices. This call must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/tags

### POST
Test a message to devices with any of the specified `tags`. The call accepts an array of tags. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/segments

### POST
Send a message to users in one or more of the specified `segments`. The request accepts an array of IDs segments. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/user/{user}

### POST
Send a message to a `user`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/device/{device}

### POST
Send a message to a `device`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }



# Group Region
Methods to manage your regions. Regions are geo-fences that can eventually have Triggers and/or Beacons. 
When none are created your region will just gather the session data as users enter and leave that area or are in the range of your beacons.
You can have a combination of Triggers and Beacons or just one of them. Note that iBeacon technology requires users to turn on Bluetooth to work.


## /region{?limit,skip}

### GET
Get all regions for an application.
This request is authenticated with the `applicationKey` and  `applicationSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip
    

+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }




## /region

### POST
Create a new region. To retrieve a timezone from the coordinates you can use https://developers.google.com/maps/documentation/timezone/.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Request (application/json)

        {
                "name": "My Region",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "major": "123456",
                "timezone": "Europe/Amsterdam"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "region":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## /region/{region}

### GET
Get a region object.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
        }





## /region/{region}

### PUT
Modify a region.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.

+ Request (application/json)

        {
                "name": "My Region",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "major": "123456",
                "timezone": "Europe/Amsterdam"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region updated"
        }



## /region/{region}

### DELETE
Destroy a region. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region deleted"
        }


# Group Reply
A Reply object is what Notificare creates when users interact with notifications with actions. 
These objects hold every single interaction and data your users send you.


## /reply/fornotification/{notification}{?limit,skip}

### GET
Get all replies for a specific notification.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The notification id of an active notification.

    + limit = `1000` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)


        {
                "replies":[
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            },
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            }
                ],
                "count": 2
        }



# Group Stats
Methods to retrieve usage reports of all resources in the API. 
These requests must be authenticated with the `token`.


## /stats/device/{dimension}/forapplication/{application}/lastmonth

### GET
Retrieve the number of devices of a certain dimension for the last 30 days for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## /stats/device/{dimension}/forapplication/{application}/{year}

### GET
Retrieve the number of devices of a certain dimension in a specific year for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }


## /stats/device/{dimension}/forapplication/{application}/{year}/{month}

### GET
Retrieve the number of devices of a certain dimension in a specific month for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## /stats/device/{dimension}/forapplication/{application}/{year}/{month}/{day}

### GET
Retrieve the number of devices of a certain dimension in a specific day for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
        
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }


## /stats/event/{type}/forapplication/{application}/lastmonth

### GET
Retrieve the number of events of a certain type for the last 30 days and for a specific application.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## /stats/event/{type}/forapplication/{application}/{year}

### GET
Retrieve the number of events of a certain type for a specific year and for a specific application.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## /stats/event/{type}/forapplication/{application}/{year}/{month}

### GET
Retrieve the number of events of a certain type for a specific month and for a specific application.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## /stats/event/{type}/forapplication/{application}/{year}/{month}/{day}

### GET
Retrieve the number of events of a certain type for a specific day and for a specific application.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }

## /stats/notification/lastmonth

### GET
Retrieve the number of notifications sent on the last 30 days.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


# Group Status
Public methods to retrieve information about the status and health of the API 

## /status

### GET
Get the current availability of the API


+ Response 200 (application/json; charset=utf-8)

        {
                "status":"ok"
        }




# Group Trigger
Methods to manage your triggers. Triggers are used to send messages when some event occurs.
There are two types of triggers, Geo-Triggers and In-App triggers. Geo-Triggers are used by regions and beacons to send notifications whenever a device enters/exits a Region or is in the proximity range of a Beacon.
In-App triggers basically are a free form of triggers that you can use to send a notification on any in-app event. 

## /trigger{?limit,skip}

### GET
Get all triggers for an application.
This request is authenticated with the `applicationKey` and  `applicationSecret`.


+ Parameters

    + limit = `250` (optional, number, `100`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip
    

+ Response 200 (application/json; charset=utf-8)

        {
                "triggers":[
                            {
                                  "name": "One Time Welcome",
                                  "type": "re.notifica.trigger.region.Enter",
                                  "frequency": "once",
                                  "interval": 8600,
                                  "notBefore": "",
                                  "notAfter": "",
                                  "dayEnd": "",
                                  "dayStart": "",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": false
                            },
                            {
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
                ],
                "count": 2
        }




## /trigger

### POST
Create a new trigger. This request expects at least `name`, `type`, `frequency` and `notification`.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28T15:31:54",
                "notAfter": "2014-11-28T15:31:54",
                "dayEnd": "08:00:00",
                "dayStart": "19:00:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## /trigger/{trigger}

### GET
Get a trigger object.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
        }





## /trigger/{trigger}

### PUT
Modify a region.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id

+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28T15:31:54",
                "notAfter": "2014-11-28T15:31:54",
                "dayEnd": "08:00:00",
                "dayStart": "19:00:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger updated"
        }



## /trigger/{trigger}

### DELETE
Destroy a trigger. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger deleted"
        }


# Group Upload
These methods let you manage files.
All the files you upload to Notificare can be used as content of your notifications.

## /upload

### POST
Upload a file to Notificare.

+ Response 201 (application/json; charset=utf-8)

        {
                "filename": "https://s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9f.."
        }

## /upload/{url}

### DELETE
Delete file from Notificare storage. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `applicationSecret`.

+ Parameters

    + url (required, string, `https://s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9f..`)...The url of the file to delete


+ Response 204


# Group User Segment
These methods let you create, change and remove user segments

## /usersegment{?limit,skip}

### GET
Retrieve a list of segments

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        },
                        {
                                "_id": "54321",
                                "name": "newbies",
                                "description": "people who just joined"
                        }
                ],
                "count": 2
        }

## /usersegment/forname/{name}{?limit,skip}

### GET
Retrieve a list of segments with a name (starting with) `name`

+ Parameters

    + name (required, string, `fans`)...The (start of the) name of the segment you are looking for

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        }
                ],
                "count": 1
        }

## /usersegment/{segment}

### GET
Retrieve a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "_id": "12345",
                        "name": "fans",
                        "description": "people who like our page on Facebook"
                }
        }

### PUT
Change `name` and/or `description` of a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment updated"
        }

### DELETE
Remove a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment removed"
        }


## /usersegment

### POST
Create a new user segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "id":"12345"
                }
        }

# Group User
Methods for retrieving (groups of) users and adding / removing them from user segments

## /user{?limit,skip}

### GET
List all users for this app

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## /user/forsegment/{segment}{?limit,skip}

### GET
List users for a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## /user/search/{search}{?limit,skip}

### GET
List all users whose userName starts with `search` or whose userID is equal to `search`

+ Parameters

    + search (required, string, `Mas`)...The search string

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }


## /user/{user}

### GET

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }

## DELETE
Deactivate a user. The user will not receive any more notifications. 
If the user registers again on one of his devices, he will be activated again.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 204

## /user/foruserid/{userid}

### GET
Get details for a user

+ Parameters

    + userid (required, string, `12345`)...The app-specific userID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }



### DELETE
Deactivate a user. The user will not receive any more notifications. 
If the user registers again on one of his devices, he will be activated again.

+ Parameters

    + user (required, string, `12345`)...The app-specific userID of the user

+ Response 204


## /user/{user}/add/{segment}

### PUT
Add user to segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user added to segment"
        }

## /user/{user}/remove/{segment}

### PUT
Remove user from segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user removed from segment"
        }
        
        


