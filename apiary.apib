FORMAT: 1A
HOST: https://push.notifica.re/

# Notificare REST API
Unified remote push notifications and location services for iOS, Android and HTML5 apps. 
Create user profiles, categorize your users and devices, create/schedule any content-rich and actionable notification. 
Use Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate messaging experience. Sign up for free [here](https://dashboard.notifica.re/#/sign-up).

The API calls below are all authenticated. There are 4 types of authentication credentials:

- `email` / `password`: Used for signing in to your account and retrieving an access token

- `token`: Used for all calls that need account-wide access, such as stats, lists of applications, etc.

- `applicationKey` / `applicationSecret`: Only used for calls that originate from the device, e.g., registration, tags.

- `applicationKey` / `masterSecret`: Used for calls that are related to a specific application and originate from your backend system, e.g., push, user segments, user lists, device lists, regions.

All 4 types use normal Basic HTTP Authentication (username + password), in case of token, the password is ignored, so can be anything, e.g. "xxx"


For more information about this API, please [contact us](http://notifica.re/contact).


# Group Account
Retrieve your account object. 
Includes the `token` that will be required to create and manage applications and get global stats about your account.


## /account/foremail/{email}

+ Parameters

    + email (required, string, `name@domain.com`)...The email used to register the account.


### GET
Retrieve an account object based on credentials. This request must be authenticated with the `email` and `password`.


+ Response 200 (application/json; charset=utf-8)

        {
                "account":{
                            "_id":"5245bc5b3e66a3b01f0024d4"
                            "email":"massimo@notifica.re",
                            "name":"Massimo Gondoliere",
                            "subscriptionId":"",
                            "token":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                            "firstTime":true,
                            "registrationDate":"2013-03-01T08:00:00.000Z",
                            "automaticUpgrade":false,
                            "subscription":false,
                            "superAccount":true,
                            "userLimit":5000,
                            "plan":"Free",
                            "accessWarning":false,
                            "blocked":false,
                            "active":true,
                            "billingInfo":{
                                             "company":"Notificare BV",
                                             "firstName":"Massimo",
                                             "lastName":"Gondoliere",
                                             "address1":"Overhoeksplein 2",
                                             "address2":"",
                                             "city":"Amsterdam",
                                             "state":"Zuid-Holland",
                                             "country":"NL",
                                             "zipcode":"1031 KS",
                                             "phone":"0854014413",
                                             "vatNumber":"NL851989627B01",
                                             "billingCycle":"monthly"
                                   }
                             }
                }
        }


+ Response 404 (application/json; charset=utf-8)

        {
                "error":"account not found"
        }
        
+ Response 403 (application/json; charset=utf-8)

        {
                "error":"account inactive"
        }

# Group Application
Your account can create as many applications as you want. 
Applications must provide a name, a category and the environment it should use. When you create an application three access keys will be automatically created for you. 
These keys will be used in by both your apps and this API to access your applications. Make sure you never share these keys publicly online. 

## Application Collection [/application{?limit,skip}]

### Get all applications [GET]
Get your active applications. This request must be authenticated with the `token`.

+ Parameters

    + limit = `250` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 201 (application/json; charset=utf-8)

        {
                "applications":[
                                 {
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "5245bc5b3e66a3b01f0024d4",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "actionCategories": [{
                                            "name": "MyTemplate",
                                            "type": "re.notifica.notification.Alert",
                                            "actions": [{
                                                "label": "follow",
                                                "type": "re.notifica.action.Callback",
                                                "target": "",
                                                "camera": false,
                                                "keyboard": false,
                                                "destructive": false
                                            }]
                                        }],
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }
        

## New Application [/application]
### Create an application [POST]
Create a new application. This request must be authenticated with the `token`.

+ Parameters

    + name (required, string, `My Amazing App`)...Your application's name.
    + production (required, `boolean`)...If your application is set to production or not.
    + category (required, string, `Business`)...Your application's category.
    + actionCategories (optional, array, `[{"name:"My Template", type:"re.notifica.notification.Alert", actions: [{label:"Reply", type:"re.notifica.action.Callback", target:"", camera:false, keyboard:false, destructive:false}"}]`)...An array of objects that can be used as templates for messages.

+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "application":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }

## Application [/application/{application}]
### Get a specific application [GET]
Get an application object. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "application":{
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "xxxxxxxxxxx",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "actionCategories": [{
                                                                                "name": "MyTemplate",
                                                                                "type": "re.notifica.notification.Alert",
                                                                                "actions": [{
                                                                                    "label": "follow",
                                                                                    "type": "re.notifica.action.Callback",
                                                                                    "target": "",
                                                                                    "camera": false,
                                                                                    "keyboard": false,
                                                                                    "destructive": false
                                                                                }]
                                                                            }],
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }


### Modify a specific application [PUT]
Modify an application. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application changes saved"
        }




### Detele a specific application [DELETE]
Destroy an application. This operation can not be undone. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.



+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application deactivated"
        }




# Group Beacon
Methods to manage your beacons. Be sure to add the `regionConfig.proximityUUID` in your Application and create a Region first.
Also beacons require that you create a triggered message previously.


## Beacon Collection [/beacon/forregion/{region}]
### Get all beacons for a certain region [GET]
Get all beacons for a certain region.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacons":[{
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "notification":"6245bc5b3e66a3b01f0024d5",
                                   "name": "My Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        },
        {
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "notification":"6245bc5b3e66a3b01f0024d5",
                                   "name": "My Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        }]


## New Beacon [/beacon]

### Create a new beacon for a region [POST]
Create a new beacon for a region. To complete this request you must create a triggered Notification first. 
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + name (required, string, `My Beacon`)...Your beacon's name
    + major (required, number, `654321`)...Your beacon's major identifier (must match a previously created identifier of a region)
    + minor (required, number, `123456`)...Your beacon's minor identifier (must be unique per major)
    + proximity (optional, string, `immediate`)...Your notification proximity. Accepts one of these: 'immediate', 'near' and 'far'. (deprecated)
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4`)...An Id of a previously created notification. (deprecated)
    + proximityNotifications (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + batteryLevel (optional, number, `10`)...An object representing the battery level of this beacon.
    + purpose (optional, string, `general`)...An object representing the purpose of the beacon. Accepts one of these: 'general', 'pay', 'info', 'staff', 'admin'.
    + latitude (optional, number, `5.435`)...An integer representing the beacon's latitude.
    + longitude (optional, number, `3.435`)...An integer representing the beacon's longitude.
    + data (optional, mixed, `{"mykey":"myvalue"}`)...A free form object that can be assigned to a beacon.
    + triggers (optional, `boolean`)...Set to true if this beacon can be used in triggers. Max. number of beacons that can use triggers is limited to 10.



+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "beacon":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }

## Beacon [/beacon/{id}]
### Get a beacon object [GET]
Get a beacon object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacons":{
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "notification":"6245bc5b3e66a3b01f0024d5",
                                   "name": "My Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        }


### Modify a beacon [PUT]
Modify a beacon.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.
    + name (required, string, `My Beacon`)...Your beacon's name
    + major (required, number, `654321`)...Your beacon's major identifier (must match a previously created identifier of a region)
    + minor (required, number, `123456`)...Your beacon's minor identifier (must be unique per major)
    + proximity (optional, string, `immediate`)...Your notification proximity. Accepts one of these: 'immediate', 'near' and 'far'. (deprecated)
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4`)...An Id of a previously created notification. (deprecated)
    + proximityNotifications (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + batteryLevel (optional, number, `10`)...An object representing the battery level of this beacon.
    + purpose (optional, string, `general`)...An object representing the purpose of the beacon. Accepts one of these: 'general', 'pay', 'info', 'staff', 'admin'.
    + latitude (optional, number, `5.435`)...An integer representing the beacon's latitude.
    + longitude (optional, number, `3.435`)...An integer representing the beacon's longitude.
    + data (optional, mixed, `{"mykey":"myvalue"}`)...A free form object that can be assigned to a beacon.
    + triggers (optional, `boolean`)...Set to true if this beacon can be used in triggers. Max. number of beacons that can use triggers is limited to 10.


+ Request (application/json)

        {
                "notification":"12345",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon updated"
        }


### Delete a beacon [DELETE]
Delete a beacon. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon deleted"
        }



# Group Device
Methods to manage devices. 
Use these methods to retrieve information about devices for an application, for a specific user, for a specific tag or in a specific location.
Management of devices is exclusively made by our SDK libraries therefore you only get access to read operations.

## Device Collection [/device]

### Get all the devices for a specific application [GET]
Get all the devices for a specific application.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,"last_active":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }



## Filter by User [/device/foruser/{user}]

### Get all the devices for a specific user [GET]
Get all the devices for a specific user.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }

## Get all tags [/device/tags{?limit,skip}]

### Get the list of all tags for this application [GET]
Get the list of all tags for this application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
                "tags":[
                        {"tag":"toys", "deviceCount": 2},
                        {"tag":"kitchen", "deviceCount": 5}
                ],
                "count": 2

        }


## Filter by tag [/device/fortag/{tag}]

### Get all the devices for a specific tag [GET]
Get all the devices for a specific tag.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + tag (required, string, `toys`)...The tag the device is associated with


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel
                              }
                ],
                "count": 2
                          
        }

## Search tags [/device/tag/{tag}]

### Search tags that match partially or totally a specific tag [GET]
Get all the tags that match match partially or totally a specific tag.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + tag (required, string, `toys`)... The string to search for


+ Response 200 (application/json; charset=utf-8)

        {
                "tags":[
                        {"tag":"toys", "deviceCount": 2},
                        {"tag":"kitchen", "deviceCount": 5}
                ],
                "count": 2

        }



## Filter by location [/device/bylocation/{latitude}/{longitude}/{distance}]

### Get all the devices in a specific location [GET]
Get all the devices in a specific location.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Parameters

    + latitude (required, float, `4.2345`)...The desired latitude
    + longitude (required, float, `5.6789`)...The desired longitude
    + distance (required, float, `63.76`)...The distance in meters of your search area relative to the latitude and longitude


+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }


# Group Event
Get all the Events stored for a specific application.

## Event Types:
| type | description |
|:---------:|----------------------------------|
| re.notifica.event.application.Install | Stored whenever a new device installs the app. |
| re.notifica.event.application.Open | Stored whenever the application becomes active. |
| re.notifica.event.application.Close | Stored whenever the application goes to background. |
| re.notifica.event.notification.Influenced | Stored whenever a notification when app is not active. |
| re.notifica.event.notification.Received | Stored whenever a notification arrives. |
| re.notifica.event.notification.Open | Stored whenever a notification is open. |
| re.notifica.event.notification.Close | Stored whenever a notification is closed. |
| re.notifica.event.region.Session | Stored whenever a user enters and leaves a region. |
| re.notifica.event.beacon.Session | Stored whenever a user is on the proximity of a beacon. |

## Event Collection [/event/forapplication/{application}/{type}]

### Get all the events for a specific application [GET]
Get all the Events types stored for a specific application.
This request is authenticated with `token`.

+ Parameters

    + application (required, string, `542f1868d341d51284b`)...The application's Id which the event belongs to.
    + type (required, string, `re.notifica.event.application.Install`)...The type of event.


+ Response 200 (application/json; charset=utf-8)

        {
                "events":[
                              {
                                "_id":"542f1868d341d51284b",
                                "application":"5354f3545a544452ff4c7c0",
                                "userID":null,
                                "sessionID":"5SX4tAmO345juHL",
                                "time":"2014-10-03T21:43:04.231Z",
                                "type":"re.notifica.event.application.Install"
                              },
                              {
                                "_id":"542f153401d51284b",
                                "application":"5354f3545a544452ff4c7c0",
                                "userID":null,
                                "sessionID":"5SX4tAsd534MjuHL",
                                "time":"2014-10-03T21:43:04.231Z",
                                "type":"re.notifica.event.application.Install"
                              },
                ]

        }

## Event [/event/{id}]

### Get an event object [GET]
Get a specific event object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `542f1868d341d51284b`)...The event's Id.


+ Response 200 (application/json; charset=utf-8)

        {
                "event":{
                             "_id":"542f153401d51284b",
                             "application":"5354f3545a544452ff4c7c0",
                             "userID":null,
                             "sessionID":"5SX4tAsd534MjuHL",
                             "time":"2014-10-03T21:43:04.231Z",
                             "type":"re.notifica.event.application.Install"
                           }

        }


# Group Export
Methods for exporting users and devices.

## Export Collection [/export]

### Get all export jobs for an application [GET]
Get all export jobs for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Response 200 (application/json; charset=utf-8)

        {
                "exportJobs":[
                                {
                                   "_id":"54fec699beb5cb2f6f9839ed",
                                   "application":"5354f08474adc4183214c143",
                                   "data":null,
                                   "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                   "date":"2015-03-10T10:25:29.340Z",
                                   "status":"success",
                                   "type":"re.notifica.export.User"
                                }
                             ]

        }


## New Export [/export/{type}]

### New Export [POST]
Create a new export job for an application. This job might take some time to finish, depending on the number of users your application has.
This request is authenticated with the `applicationKey` and  `masterSecret`.

### Export types

#### re.notifica.export.User (default)
Used to export the list of users for an application.

#### re.notifica.export.Device
Used to export the list of devices for an application.

+ Parameters

    + type (required, string, `re.notifica.export.User`)...The export type


+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export [/export/{export}]

### Get an export job object [POST]
Get a specific export job object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `542f1868d341d51284b`)...The export job Id.


+ Response 200 (application/json; charset=utf-8)

        {
                "exportJob":{
                                                               "_id":"54fec699beb5cb2f6f9839ed",
                                                               "application":"5354f08474adc4183214c143",
                                                               "data":null,
                                                               "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                                               "date":"2015-03-10T10:25:29.340Z",
                                                               "status":"success",
                                                               "type":"re.notifica.export.User"
                                                            }

        }

### Delete an export job [DELETE]
Delete an export job. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + export (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an export job.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"export job deleted"
        }


## Export [/export/fortype/{type}]

### Get all export jobs of a specific type [GET]
Get all export jobs of a specific type.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + type (required, string, `re.notifica.export.User`)...The export type


+ Response 200 (application/json; charset=utf-8)

        {
                "exportJobs":[
                                {
                                   "_id":"54fec699beb5cb2f6f9839ed",
                                   "application":"5354f08474adc4183214c143",
                                   "data":null,
                                   "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                   "date":"2015-03-10T10:25:29.340Z",
                                   "status":"success",
                                   "type":"re.notifica.export.User"
                                }
                             ]

        }

## Export Result [/export/result/{export}]

### Get a specific export job result [GET]
Get a specific export job result. This endpoint will only be available for export jobs with a status equal to success.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + export (required, string, `54fec699beb5cb2f6f9839ed`)...The id of a export job



# Group Import
Methods for importing collections of items. Files are assumed to be uploaded to Notificare Storage before they can be used in a new import. Use this [endpoint](http://docs.notificare.apiary.io/#upload) to upload a file.

## New Import [/import/{type}]

### New Import [POST]
Create a new import job for an application. This job might take some time to finish, depending on the size of the file you uploaded. You can retrieve the status of all the jobs by using the other endpoints below.
This request is authenticated with the `applicationKey` and  `masterSecret`.


### Import types

#### re.notifica.import.User (default)
Used to import a list of users. Every row in the referenced CSV should include at least a `userID`. userName is optional and defaults to `anonymous`. This import type has no extra settings.

#### re.notifica.import.Device
Used to import a list of devices. Every row in the referenced CSV should include at least a `deviceID`, `osVersion`, `appVersion` and `platform`.
The latter three can also be defaulted to whatever you put in the `data` field in the request. See the example, where `appVersion`, `platform` and `language` have default values.
There is one option in this import type, which is `overwrite`, defaults to `false`.

Recognized columns are:

+ deviceID (APNS device token or Android registration id)

+ osVersion

+ appVersion

+ sdkVersion

+ platform (iOS, Android)

+ osString (defaults to platform + osVersion)

+ deviceString (defaults to 'unknown')

+ lastActive (ISO Date, defaults to current date/time)

+ longitude

+ latitude

+ locationLastUpdated (ISO Date, defaults to lastActive)

+ timeZoneOffset

+ userID (If the userID doesn't exist yet, a new user will be created. If omitted, an anonymous user will be generated.)

+ userName (only used when userID is present. Defaults to 'anonymous')



#### re.notifica.import.UserSegment
Used to import a list of users into a segment. Every row in the referenced CSV should contain a `userID`.
The user segment to import into should be set as the `userSegment` property of `data`.
There is one option in this import type, which is `clear`. If set, it clears the segment before importing users, otherwise it just adds users. It defaults to `false`.


+ Parameters

    + type (required, string, `re.notifica.import.Device`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "appVersion": "1.0",
                        "platform": "iOS",
                        "language": "pt",
                        "overwrite": true
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Import Collection [/import]
### Get all the import objects [GET]
Get all the import objects.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Response 200 (application/json; charset=utf-8)

        {


        }
                "importJobs":[{
                                   "_id":"545cc517ff584870b89fb98",
                                   "account":"50d771ff87e53afff2600001c",
                                   "application":"5354f0bbdddd4452ff4c7c0",
                                   "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                   "data":{
                                            "user_segment":"53a0a047fff17d3215a94f6",
                                            "clear":false
                                          },
                                   "result":"imported 0 records, skipped 3 records",
                                   "date":"2014-11-07T13:11:51.316Z",
                                   "status":"success",
                                   "type":"re.notifica.import.UserSegment"
                              }]
        }

## Retrieve all import objects by type [/import/{type}]
### Get all the import objects by type [GET]
Get all the import objects by type.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.import.UserSegment`)...The import type of a previously created job.

+ Response 200 (application/json; charset=utf-8)

        {


        }
                "importJobs":[{
                                   "_id":"545cc517ff584870b89fb98",
                                   "account":"50d771ff87e53afff2600001c",
                                   "application":"5354f0bbdddd4452ff4c7c0",
                                   "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                   "data":{
                                            "user_segment":"53a0a047fff17d3215a94f6",
                                            "clear":false
                                          },
                                   "result":"imported 0 records, skipped 3 records",
                                   "date":"2014-11-07T13:11:51.316Z",
                                   "status":"success",
                                   "type":"re.notifica.import.UserSegment"
                              }]
        }

## Import [/import/{type}/{import}]
### Get an import object [GET]
Get an import object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.import.UserSegment`)...The import type of a previously created job.
    + import (required, string, `5245bc5b3e66a3b01f0024d4`)...The import id of a previously created job.


+ Response 200 (application/json; charset=utf-8)

        {
                "importJob":{
                                "_id":"545cc517ff584870b89fb98",
                                "account":"50d771ff87e53afff2600001c",
                                "application":"5354f0bbdddd4452ff4c7c0",
                                "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                "data":{
                                      "user_segment":"53a0a047fff17d3215a94f6",
                                      "clear":false
                                },
                                "result":"imported 0 records, skipped 3 records",
                                "date":"2014-11-07T13:11:51.316Z",
                                "status":"success",
                                "type":"re.notifica.import.UserSegment"
                          }
        }


# Group Notification
Methods to create, send and schedule notifications to a specific target audience, user or device.
Combines User, Segments, Tags and the location of the devices to provide you a powerful device selection query for your campaigns.
The 3 most important things to have in consideration when creating a new message is that `message` is always mandatory, the property `type` defines which type of content should be presented to the user and the combination of `message`, `extra`, `sound`, `badge` should be no bigger than 200 bytes.
You can send several types of content in your message. The array `content` should contain one or more objects according to the `type` of message. 
You can also add an array `actions` to your notifications by simply providing one or more objects. 

## Notification Types:
| type | description | 
|:---------:|-------------|
| re.notifica.notification.Alert | The simplest form of notifications, it will display the message in a dialog/alert window. It does not require a content object. You can although add Action objects to it, actions will be added to the window as buttons. |
| re.notifica.notification.WebView | This type allows you to show any piece of HTML in a native WebView. It requires a Content object of type `re.notifica.content.HTML`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.URL | Use this type to open any URL in a native WebView. It requires a Content object of type `re.notifica.content.URL`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Image | Add one or more images to your notifications. It requires one or more Content objects of types `re.notifica.content.JPEG`, `re.notifica.content.PNG` or `re.notifica.content.GIF`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Map | This type of notifications will use the device's native maps to display one or more locations. It requires one or more Content objects of type `re.notifica.content.Marker`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Rate | This type is used exclusively to send a dialog window with three Action objects included. The user can then choose to rate the app in App Store/Google Play, to be remembered later to rate or to not rate at all. This type of Notification does not require any Content object. Also you can not add any more Action objects to this type of Notification. |
| re.notifica.notification.Passbook | Use this type to easily send .pkpass files in your push notifications. Distribute your Passbook Passes directly to your app users. This type does not allow any Action objects. |


## Content Objects:
| type | data | 
|:---------:|-------------|
| re.notifica.content.Text | string (eg.: Hello World!) |
| re.notifica.content.HTML | string (eg.: \<h1>Hello World!\</h1>) |
| re.notifica.content.URL | string (eg.: http: //notifica.re) |
| re.notifica.content.Image | string (eg.: https: //s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9fd.../6ccd..) |
| re.notifica.content.Marker | object (eg.: {"title":"Some Place", "description":"Some description about that place", "latitude": 4.098765, "longitude": 5.08875}) |
| re.notifica.content.PKPass | string (eg.: http: //notifica.re/path/to/my/pass.pkpass) |


## Action Objects:
| type | label | target | keyboard | camera | rules |
|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
| re.notifica.action.Callback | string (eg.: open cam) | string (eg.: http: //api.notifica.re/register?action=xpto&var=xyz) | boolean | boolean | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Telephone | string (eg.: make a call) | string (eg.: 0500666858) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.SMS | string (eg.: send sms) | string (eg.: 0500666858,0500666858) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Mail | string | string (eg.: me @company.com,you @company.com) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Browser | string (eg.: open notifica.re) | string (eg.: http: //notifica.re) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.App | string (open facebook) | string (eg.: fb: //) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Custom | string (eg.: open tab) | string (eg.: openTabInMyCode) | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |

## Rules Objects:
| type | params |
|:---------:|-------------|
| re.notifica.rule segment.Add | array of segment Ids (eg.: ["532434df434657df4664","532434df434657df4664"]) |
| re.notifica.rule segment.Remove | array of segment Ids (eg.: ["532434df434657df4664","532434df434657df4664"]) |
| re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"]) |
| re.notifica.rule tag.Remove | array of tags (eg.: ["tag_news","tag_press"]) |

## Send to all [/notification/broadcast]

### Send a message to all devices [POST]
Send a message to **all** devices. 
You can also schedule a broadcast, if `schedule` is true you should immediately use /notification/schedule to create the schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.



+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": []
                        }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Send to one or more tags [/notification/tags]

### Send a message to devices with any of the specified tags [POST]

Send a message to devices with any of the specified `tags`. 
You can also schedule this message, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of tags. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" false,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [],
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Send to one or more segments [/notification/segments]

### Send a message to users in one or more of the specified segments [POST]
Send a message to users in one or more of the specified `segments`. 
You can also schedule this messages, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of Segment Ids. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Send to a specific User [/notification/user/{user}]

### Send a message to one single user [POST]
Send a message to one single `user`. 
You can also schedule a private message, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" false,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Send to a specific device [/notification/device/{device}]

### Send a message to one single device [POST]
Send a message to a `device`. 
You can also schedule this type of messages, if `schedule` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "schedule" true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": []
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        

## Create a triggered message [/notification/triggered]

### Create a triggered message [POST]
Create a message that will not generate any notification. These kind of messages can be used by when creating a `Trigger` or `Beacon`. 
You can not schedule a triggered message.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "triggered":true,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Schedule a message [/notification/schedule]

### Start a schedule task for a previously created message [POST]
Start a schedule task for a previously created message.
The property `local` determines if message should be sent on the device's local time or UTC.
If `local` is true make sure the `time` is at least 14 hours from now to make sure the message will arrive in all timezones.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The notification Id of the notification to be schedule.
    + time (required, string, `2014-12-25T10:00:00`)...The date and time in which the notification should be sent.
    + local (required, `boolean`)...Defines if message should be sent on date and time of the device. If false time will be considered UTC.

+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "time":"2014-12-25T10:00:00",
                "local":true
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "schedule":{
                             "\_id":"5245bc5b3e66a3b01f0024d4"
                           }
        }


## Notification Info [/notification/{id}/info]

### Get information about message performance [GET]
Retrieve information about your message performance.
This request must be authenticated with the `applicationKey` and `masterSecret`.


+ Response 200 (application/json; charset=utf-8)

        {
                "info":{
                             "application": "5354f0bb3fff5452ff4c7c0"
                             "devices": 3
                             "duration": 749
                             "fails": 0
                             "id": "543d90d0f4e6e1we3ad6576"
                             "notification": "543d90d0wew6e10309ad6575"
                             "opened": 0
                             "queued": 3
                             "replied": 0
                             "sent": 3
                             "status": "finished"
                             "users": 0
                        }
        }



# Group Notification Test
Methods to test audience selection. Retrieves current devices based on the specified selection. It does not send any notification.
Combines User, Segments, Tags and the location of the devices the same way Notification does.

## Test a message to all [/notification/test/broadcast]

### Test a message to all devices [POST]
Test a message to **all** devices. This call must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (optional, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.



+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to one or more tags [/notification/test/tags]

### Test a message to devices with any of the specified tags [POST]
Test a message to devices with any of the specified `tags`. The call accepts an array of tags. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (optional, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, number, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, number, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.



+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to one or more segments [/notification/test/segments]

### Test a message to users in one or more of the specified tags [POST]
Send a message to users in one or more of the specified `segments`. The request accepts an array of IDs segments. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message for a specific user [/notification/test/user/{user}]

### Test a message to a user [POST]
Test a message to a `user`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to a specific device [/notification/test/device/{device}]

### Test a message to a device [POST]
Test a message to a `device`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }


# Group Pass
Methods to manage your passes. Before creating passes you must create passbook templates. To create, edit and delete templates see the [Passbook](http://docs.notificare.apiary.io/#passbook) endpoints.


## Pass Collection [/pass{?limit,skip}]

### Get all passes for an application [GET]
Get all passes for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
             "passes":[
                             {
                               "_id":"5501894253058ca5269a9928",
                               "application":"5354f0bb3fa544452ff4c7c0",
                               "passbook":"54e135049c2cad772e7c0de0",
                               "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                               "data":{
                                        "backgroundColor":"rgb(0,0,0)",
                                        "foregroundColor":"rgb(255,255,255)",
                                        "suppressStripShine":false,
                                        "labelColor":"rgb(255,255,255)",
                                        "logoText":"My Company",
                                        "description":"coupon example",
                                        "auxiliaryFields":[],
                                        "headerFields":[],
                                        "primaryFields":[
                                                          {
                                                             "string":true,
                                                             "key":"discount",
                                                             "label":"discount",
                                                             "textAlignment": "PKTextAlignmentLeft",
                                                             "value": "20% off"
                                                           }
                                                          ],
                                        "secondaryFields":[
                                                            {
                                                              "string":true,
                                                              "key":"expires",
                                                              "label":"expires",
                                                              "textAlignment":"PKTextAlignmentLeft",
                                                              "value":"31-12-2015"
                                                            }
                                                          ],
                                        "backFields":[],
                                        "transitType":null,
                                        "barcode":{
                                                     "format":"PKBarcodeFormatQR",
                                                     "messageEncoding":"iso-8859-1"
                                                  },
                                        "background":null,
                                        "thumbnail":null,
                                        "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                                        "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                                        "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                                        "footer":null

                               }
                             }
                          ],
                          "count":2
        }




## New Pass [/pass]

### Create a new pass [POST]
Create a new pass.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
             "_id":"5501894253058ca5269a9928",
             "application":"5354f0bb3fa544452ff4c7c0",
             "passbook":"54e135049c2cad772e7c0de0",
             "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
             "data":{
                       "backgroundColor":"rgb(0,0,0)",
                       "foregroundColor":"rgb(255,255,255)",
                       "suppressStripShine":false,
                       "labelColor":"rgb(255,255,255)",
                       "logoText":"lebkov",
                       "description":"coupon example",
                       "auxiliaryFields":[],
                       "headerFields":[],
                       "primaryFields":[
                                         {
                                            "string":true,
                                            "key":"discount",
                                            "label":"discount",
                                            "textAlignment": "PKTextAlignmentLeft",
                                            "value": "20% off"
                                         }
                                       ],
                       "secondaryFields":[
                                           {
                                              "string":true,
                                              "key":"expires",
                                              "label":"expires",
                                              "textAlignment":"PKTextAlignmentLeft",
                                              "value": "31-12-2015"
                                           }
                                         ],
                       "backFields":[],
                       "transitType":null,
                       "barcode":{
                                   "format":"PKBarcodeFormatQR",
                                   "messageEncoding":"iso-8859-1"
                                 },
                       "background":null,
                       "thumbnail":null,
                       "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                       "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                       "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                       "footer":null
             }
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "pass":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Pass [/pass/{pass}]

### Get a pass object [GET]
Get a pass object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of pass.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passbook":"54e135049c2cad772e7c0de0",
                     "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment": "PKTextAlignmentLeft",
                                                    "value": "20% off"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft",
                                                      "value": "31-12-2015"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     }
                }

### Modify a pass [PUT]
Modify a pass.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active pass.

+ Request (application/json)

        {
                             "_id":"5501894253058ca5269a9928",
                             "application":"5354f0bb3fa544452ff4c7c0",
                             "passbook":"54e135049c2cad772e7c0de0",
                             "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                             "data":{
                                       "backgroundColor":"rgb(0,0,0)",
                                       "foregroundColor":"rgb(255,255,255)",
                                       "suppressStripShine":false,
                                       "labelColor":"rgb(255,255,255)",
                                       "logoText":"lebkov",
                                       "description":"coupon example",
                                       "auxiliaryFields":[],
                                       "headerFields":[],
                                       "primaryFields":[
                                                         {
                                                            "string":true,
                                                            "key":"discount",
                                                            "label":"discount",
                                                            "textAlignment": "PKTextAlignmentLeft",
                                                            "value": "20% off"
                                                         }
                                                       ],
                                       "secondaryFields":[
                                                           {
                                                              "string":true,
                                                              "key":"expires",
                                                              "label":"expires",
                                                              "textAlignment":"PKTextAlignmentLeft",
                                                              "value": "31-12-2015"
                                                           }
                                                         ],
                                       "backFields":[],
                                       "transitType":null,
                                       "barcode":{
                                                   "format":"PKBarcodeFormatQR",
                                                   "messageEncoding":"iso-8859-1"
                                                 },
                                       "background":null,
                                       "thumbnail":null,
                                       "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                                       "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                                       "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                                       "footer":null
                             }
                        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass updated"
        }




### Delete a pass [DELETE]
Delete a pass. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active pass.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass deleted"
        }


# Pass [/pass/forserial/{serial}]

### Get a pass object using the serial number [GET]
Get a pass object using the serial number.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of pass.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passbook":"54e135049c2cad772e7c0de0",
                     "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment": "PKTextAlignmentLeft",
                                                    "value": "20% off"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft",
                                                      "value": "31-12-2015"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     }
                }


## Redeem Pass [/pass/redeem/{serial}]

### Redeem a pass [PUT]
Redeem a pass.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + serial (required, string, `402ab90b-65b5-4b4f-91fa-9823b2972f85`)...The serial number of an active pass.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass redeemed"
        }


## Download Pass [/pass/pkpass/{serial}]

### Download Pass [GET]
Download a pass.
This request does not require authentication.

+ Parameters

    + serial (required, string, `402ab90b-65b5-4b4f-91fa-9823b2972f85`)...The serial number of an active pass.





# Group Passbook
Methods to manage your passbook templates. These templates should be created before you can start creating passes.
They will help you pre-define the template styles your application needs and accelerate pass creation. To create and redeem passes see also the [Pass](http://docs.notificare.apiary.io/#pass) endpoints.


## Passbook Collection [/passbook{?limit,skip}]

### Get all passbook templates for an application [GET]
Get all passbook templates for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
             "passbooks":[
                             {
                               "_id":"5501894253058ca5269a9928",
                               "application":"5354f0bb3fa544452ff4c7c0",
                               "passStyle":"coupon",
                               "data":{
                                        "backgroundColor":"rgb(0,0,0)",
                                        "foregroundColor":"rgb(255,255,255)",
                                        "suppressStripShine":false,
                                        "labelColor":"rgb(255,255,255)",
                                        "logoText":"lebkov",
                                        "description":"coupon example",
                                        "auxiliaryFields":[],
                                        "headerFields":[],
                                        "primaryFields":[
                                                          {
                                                             "string":true,
                                                             "key":"discount",
                                                             "label":"discount",
                                                             "textAlignment":
                                                             "PKTextAlignmentLeft"
                                                           }
                                                          ],
                                        "secondaryFields":[
                                                            {
                                                              "string":true,
                                                              "key":"expires",
                                                              "label":"expires",
                                                              "textAlignment":"PKTextAlignmentLeft"
                                                            }
                                                          ],
                                        "backFields":[],
                                        "transitType":null,
                                        "barcode":{
                                                     "format":"PKBarcodeFormatQR",
                                                     "messageEncoding":"iso-8859-1"
                                                  },
                                        "background":null,
                                        "thumbnail":null,
                                        "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                                        "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                                        "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                                        "footer":null

                               },
                               "name":"coupon example",
                               "__v":0,
                               "active":false
                             }
                          ],
                          "count":2
        }




## New Passbook Template [/passbook]

### Create a new passbook template [POST]
Create a new passbook template.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
             "_id":"5501894253058ca5269a9928",
             "application":"5354f0bb3fa544452ff4c7c0",
             "passStyle":"coupon",
             "data":{
                       "backgroundColor":"rgb(0,0,0)",
                       "foregroundColor":"rgb(255,255,255)",
                       "suppressStripShine":false,
                       "labelColor":"rgb(255,255,255)",
                       "logoText":"lebkov",
                       "description":"coupon example",
                       "auxiliaryFields":[],
                       "headerFields":[],
                       "primaryFields":[
                                         {
                                            "string":true,
                                            "key":"discount",
                                            "label":"discount",
                                            "textAlignment":
                                            "PKTextAlignmentLeft"
                                         }
                                       ],
                       "secondaryFields":[
                                           {
                                              "string":true,
                                              "key":"expires",
                                              "label":"expires",
                                              "textAlignment":"PKTextAlignmentLeft"
                                           }
                                         ],
                       "backFields":[],
                       "transitType":null,
                       "barcode":{
                                   "format":"PKBarcodeFormatQR",
                                   "messageEncoding":"iso-8859-1"
                                 },
                       "background":null,
                       "thumbnail":null,
                       "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                       "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                       "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                       "footer":null
             },
             "name":"coupon example"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "passbook":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Passbook Template [/passbook/{passbook}]

### Get a passbook template object [GET]
Get a passbook template object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passStyle":"coupon",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment":
                                                    "PKTextAlignmentLeft"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     },
                     "name":"coupon example"
        }


### Modify a passbook template [PUT]
Modify a passbook template.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.

+ Request (application/json)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passStyle":"coupon",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment":
                                                    "PKTextAlignmentLeft"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://s3-eu-west-1.amazonaws.com/notificare-storage/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     },
                     "name":"coupon example"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"passbook updated"
        }


### Delete a passbook template [DELETE]
Delete a passbook template. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"passbook deleted"
        }


# Group Product
Methods to manage your virtual products. Products can be purchased inside your application through both the App Store and Google Play.


## Product Collection [/product{?limit,skip}]

### Get all products for an application [GET]
Get all products for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
            "products":[
                           {
                              "_id":"542f479660a365ad5a47a794",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.nonconsumable",
                              "type":"onetime",
                              "name":"Non-Consumable",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           },
                           {
                              "_id":"5442c0927f8ec974633ed40c",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.prod2",
                              "type":"onetime",
                              "name":"Prod2",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           },
                           {
                              "_id":"544788ed9a6050cd6f008b8d",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.consumable",
                              "type":"consumable",
                              "name":"Consumable",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           }
                       ],
            "count":3
        }




## New Product [/product]

### Create a new product [POST]
Create a new product.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
             "identifier":"re.notifica.office.consumable",
             "type":"consumable",
             "name":"Consumable",
             "stores":["AppStore","GooglePlay"],
             "active":true

        }


+ Response 201 (application/json; charset=utf-8)

        {
                "product":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Product [/product/{product}]

### Get a product object [GET]
Get a product object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                                      "_id":"544788ed9a6050cd6f008b8d",
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "identifier":"re.notifica.office.consumable",
                                      "type":"consumable",
                                      "name":"Consumable",
                                      "stores":["AppStore","GooglePlay"],
                                      "active":true
                                   }


### Modify a product [PUT]
Modify a product.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.

+ Request (application/json)

        {
                     "identifier":"re.notifica.office.consumable",
                     "type":"consumable",
                     "name":"Consumable",
                     "stores":["AppStore","GooglePlay"],
                     "active":true

                }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"product updated"
        }


### Delete a product [DELETE]
Delete a product. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"product deleted"
        }


## Product [/product/foridentifier/{sku}]

### Get a product object using the SKU [GET]
Get a product object using SKU.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + sku (required, string, `re.notifica.office.consumable`)...The SKU (identifier) of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                                      "_id":"544788ed9a6050cd6f008b8d",
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "identifier":"re.notifica.office.consumable",
                                      "type":"consumable",
                                      "name":"Consumable",
                                      "stores":["AppStore","GooglePlay"],
                                      "active":true
                                   }


# Group Purchase

## Purchase [/purchase{?limit,skip}]

### Get all purchases for an application [GET]
Get all purchases for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                    "products":[
                                   {
                                      "_id":"5477c86387c552350c886d2f",
                                      "data":{
                                                "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                "purchase_date_ms":"1417136222704",
                                                "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                "original_transaction_id":"1000000133399653",
                                                "bvrs":"1.0.36",
                                                "transaction_id":"1000000133399653",
                                                "quantity":"1",
                                                "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                "item_id":"944702328",
                                                "product_id":"re.notifica.office.consumable",
                                                "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                "bid":"re.notifica.office",
                                                "original_purchase_date_ms":"1417136222704"
                                             },
                                      "date":"2014-11-28T00:57:02.704Z",
                                      "identifier":"re.notifica.office.consumable",
                                      "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                      "userID":"joel@notifica.re",
                                      "price":0.89,
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "transactionIdentifier":"1000000133399653",
                                      "currency":"EUR"
                                   }
                               ],
                               "count":1
                }


## Purchase [/purchase/{purchase}]

### Get a specific purchase [GET]
Get a specific purchase.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + purchase (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }

## Purchase [/purchase/bytransaction/{transaction}]

### Get a specific purchase using the transaction [GET]
Get a specific purchase using the transaction.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + transaction (required, string, `1000000133399653`)...The transaction id of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }


## Purchase [/purchase/byidentifier/{identifier}]

### Get a specific purchase using the SKU [GET]
Get a specific purchase using the SKU.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + identifier (required, string, `re.notifica.office.consumable`)...The SKU (identifier) of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }


# Group Region
Methods to manage your regions. Regions are geo-fences that can eventually have Triggers and/or Beacons. 
When none are created your region will just gather the session data as users enter and leave that area or are in the range of your beacons.
You can have a combination of Triggers and Beacons or just one of them. Note that iBeacon technology requires users to turn on Bluetooth to work.


## Region Collection [/region{?limit,skip}]

### Get all regions for an application [GET]
Get all regions for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip
    

+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }




## New Region [/region]

### Create a new region [POST]
Create a new region. To retrieve a timezone from the coordinates you can use https://developers.google.com/maps/documentation/timezone/.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
                "name": "My Region",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "major": "123456",
                "timezone": "Europe/Amsterdam"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "region":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Region [/region/{region}]

### Get a region object [GET]
Get a region object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":{
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
        }


### Modify a region [PUT]
Modify a region.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.

+ Request (application/json)

        {
                "name": "My Region",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "major": "123456",
                "timezone": "Europe/Amsterdam"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region updated"
        }


### Delete a region [DELETE]
Delete a region. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region deleted"
        }


# Group Reply
A Reply object is what Notificare creates when users interact with notifications with actions. 
These objects hold every single interaction and data your users send you.


## Reply List [/reply/fornotification/{notification}{?limit,skip}]

### Get all replies for a specific notification [GET]
Get all replies for a specific notification.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The notification id of an active notification.

    + limit = `1000` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)


        {
                "replies":[
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            },
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            }
                ],
                "count": 2
        }

## Reply Collection [/reply/{reply}]

### Get a specific reply object [GET]
Get a specific reply object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + reply (required, string, `5245bc5b3e66a3b01f0024d4`)...The id for this reply.


+ Response 200 (application/json; charset=utf-8)


        {
                "reply":{
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z"
                            }
        }



# Group Stats
Methods to retrieve usage reports of all resources in the API. 
These requests must be authenticated with the `token`.


## Last month stats based on specific dimensions [/stats/device/{dimension}/forapplication/{application}/lastmonth]

### Retrieve last 30 days devices by dimension [GET]
Retrieve the number of devices of a certain dimension for the last 30 days for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## Retrieve one single year of device stats by dimension [/stats/device/{dimension}/forapplication/{application}/{year}]

### Retrieve one single year of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific year for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }


## Retrieve one single month of device stats by dimension [/stats/device/{dimension}/forapplication/{application}/{year}/{month}]

### Retrieve one single month of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific month for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## Retrieve one single day of device stats by dimension [/stats/device/{dimension}/forapplication/{application}/{year}/{month}/{day}]

### Retrieve one single day of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific day for a specific application.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
        
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }


## Retrieve last month events of a certain type [/stats/event/{type}/forapplication/{application}/lastmonth]

### Retrieve last month event stats of a certain type [GET]
Retrieve the number of events of a certain type for the last 30 days and for a specific application.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve one single year event stats of a certain type [/stats/event/{type}/forapplication/{application}/{year}]

### Retrieve one single year event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific year and for a specific application.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve one single month event stats of a certain type [/stats/event/{type}/forapplication/{application}/{year}/{month}]

### Retrieve one single month event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific month and for a specific application.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve one single year event stats of a certain type [/stats/event/{type}/forapplication/{application}/{year}/{month}/{day}]

### Retrieve one single year event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific day and for a specific application.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Open
***
re.notifica.event.notification.Close
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The application id of an active application.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }

## Retrieve last month notification stats [/stats/notification/lastmonth]

### Retrieve last month notification stats [GET]
Retrieve the number of notifications sent on the last 30 days.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


## Retrieve one single year notification stats [/stats/notification/{year}]

### Retrieve one single year of notification stats [GET]
Retrieve the number of notifications sent on a specific year.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "month":2,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single month notification stats [/stats/notification/{year}/{month}]

### Retrieve one single month of notification stats [GET]
Retrieve the number of notifications sent on a specific month.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "day":2,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single day notification stats [/stats/notification/{year}/{month}/{day}]

### Retrieve one single day of notification stats [GET]
Retrieve the number of notifications sent on a specific day.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "hour": 0,
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-01-01T01:00:00.000Z",
                            "hour":1,
                            "day":1,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }



# Group Status
Public methods to retrieve information about the status and health of the API 

## Check API Status [/status]

### Get the current availability of the API [GET]
Get the current availability of the API


+ Response 200 (application/json; charset=utf-8)

        {
                "status":"ok"
        }




# Group Trigger
Methods to manage your triggers. Triggers are used to send messages when some event occurs.
There are two types of triggers, Geo-Triggers and In-App triggers. Geo-Triggers are used by regions and beacons to send notifications whenever a device enters/exits a Region or is in the proximity range of a Beacon.
In-App triggers basically are a free form of triggers that you can use to send a notification on any in-app event. 

## Trigger Collection [/trigger{?limit,skip}]

### Get all triggers for an application [GET]
Get all triggers for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `250` (optional, number, `100`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip
    

+ Response 200 (application/json; charset=utf-8)

        {
                "triggers":[
                            {
                                  "name": "One Time Welcome",
                                  "type": "re.notifica.trigger.region.Enter",
                                  "frequency": "once",
                                  "interval": 8600,
                                  "notBefore": "",
                                  "notAfter": "",
                                  "dayEnd": "",
                                  "dayStart": "",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": false
                            },
                            {
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
                ],
                "count": 2
        }




## New Trigger [/trigger]

### Create a new trigger [POST]
Create a new trigger. This request expects at least `name`, `type`, `frequency` and `notification`.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28 15:31",
                "notAfter": "2014-11-28 15:31",
                "dayEnd": "08:00",
                "dayStart": "19:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "\_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }



## Trigger [/trigger/{trigger}]

### Get a trigger object [GET]
Get a trigger object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
        }



### Modify a trigger [PUT]
Modify a trigger.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id

+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28 15:31",
                "notAfter": "2014-11-28 15:31",
                "dayEnd": "08:00",
                "dayStart": "19:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger updated"
        }



### Delete Trigger [DELETE]
Delete a trigger. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger deleted"
        }


# Group Upload
These methods let you manage files.
All the files you upload to Notificare can be used as content of your notifications.

## New File [/upload/{type}]

### Upload a file [POST]
Upload a file to Notificare. The resulting filename is a path inside the notificare storage. This can be used as a reference to the file in further processing or deleting.
The contents of the file should be in the body of the request and with the correct mime-type. So, e.g. an import should be of type `text/csv`, an image to go with a notification `image/png`, etc.  
This request is authenticated with the `applicationKey` and  `masterSecret`.

### Uploads
***
notification
***
import
***

+ Parameters

    + type (required, string, `import`)...The type of the file to upload

+ Request (text/csv)
    userID,userName
    "test@example.com","Test User"
    
+ Response 201 (application/json; charset=utf-8)

        {
                "filename": "/imports/9f.."
        }

## Delete a file [/upload/{filename}]

### Delete a file [DELETE]
Delete file from Notificare storage. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + filename (required, string, `/notifications/9f..`)...The url of the file to delete


+ Response 204


# Group User Segment
These methods let you create, change and remove user segments

## User Segment Collection [/usersegment{?limit,skip}]

### Retrieve a list of segments [GET]
Retrieve a list of segments

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        },
                        {
                                "_id": "54321",
                                "name": "newbies",
                                "description": "people who just joined"
                        }
                ],
                "count": 2
        }

## Retrieve a list of segments by name [/usersegment/forname/{name}{?limit,skip}]

### Retrieve a list of segments by name [GET]
Retrieve a list of segments with a name (starting with) `name`

+ Parameters

    + name (required, string, `fans`)...The (start of the) name of the segment you are looking for

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                                "userSelectable": "people who like our page on Facebook"
                        }
                ],
                "count": 1
        }

## New Segment [/usersegment]

### Create a new user segment [POST]
Create a new user segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "id":"12345"
                }
        }



## Segment [/usersegment/{segment}]

### Retrieve a segment [GET]
Retrieve a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "_id": "12345",
                        "name": "fans",
                        "description": "people who like our page on Facebook"
                }
        }

### Modify a segment [PUT]
Change `name` and/or `description` of a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment updated"
        }

### Delete a segment [DELETE]
Delete a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment removed"
        }



# Group User
Methods for retrieving (groups of) users and adding / removing them from user segments

## User Collection [/user{?limit,skip}]

### List all users for this app [GET]
List all users for this app

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## Retrieve users for a segment [/user/forsegment/{segment}{?limit,skip}]

### Retrieve users for a segment [GET]
Retrieve users for a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## Search users [/user/search/{search}{?limit,skip}]

### Search users [GET]
Search users by `userName` and `userID`

+ Parameters

    + search (required, string, `Mas`)...The search string

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }


## User [/user/{user}]

### Retrieve a user object [GET]
Retrieve a user object.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }


## Delete a user [DELETE]
Deactivate a user. The user will not receive any more notifications. 
If the user registers again on one of his devices, he will be activated again.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 204


## Retrieve a user object by userID [/user/foruserid/{userid}]

### Retrieve a user object by userID [GET]
Retrieve a user object by custom `userID`.

+ Parameters

    + userid (required, string, `12345`)...The app-specific userID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }



## Add user to segment [/user/{user}/add/{segment}]

### Add user to segment [PUT]
Add user to segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user added to segment"
        }

## Remove user from segment [/user/{user}/remove/{segment}]

### Remove user from segment [PUT]
Remove user from segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user removed from segment"
        }


