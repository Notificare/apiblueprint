FORMAT: 1A
HOST: https://push.notifica.re/

# Notificare REST API
Unified remote push notifications and location services for iOS, Android and HTML5 apps. 
Create user profiles, categorize your users and devices, create/schedule any content-rich and actionable notification. 
Use Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate messaging experience. Sign up for free [here](https://dashboard.notifica.re/#/sign-up).

The API calls below are all authenticated. There are 4 types of authentication credentials:

- `email` / `password`: Used for signing in to your account and retrieving a session token

- `token`: Used for all calls that need account-wide access, such as stats, lists of applications, etc.

- `applicationKey` / `applicationSecret`: Only used for calls that originate from the device, e.g., registration, tags.

- `applicationKey` / `masterSecret`: Used for calls that are related to a specific application and originate from your backend system, e.g., push, user segments, user lists, device lists, regions.

All 4 types use normal Basic HTTP Authentication (username + password), in case of token, the password is ignored, so can be anything, e.g. "xxx"


For more information about this API, please [contact us](http://notifica.re/contact).


# Group Account
Handles authentication with the REST API.
Includes the `token` that will be required to create, edit and delete applications and get global stats about your account.


## Account [/account/login]
In order to handle authentication in our REST API you will need to at least implement the endpoints for login and logout of your account. By default only these 2 endpoints are required to handle your account. If you're using or will enable 2FA, account authentication will be extended with the endpoints provided in the 2FA section.

### Account Login [POST]
Retrieve session token based on account credentials. This request must be authenticated with the `email` and `password`.

+ Response 201 (application/json; charset=utf-8)

        {
            account: "5245bc5b3e66a3b01f0024d4",
            token: "5245bc5b3e66a3b01f2224d4",
            expires: "2013-11-25T15:19:10.000Z",
            needsSecondFactor: false
        }

+ Response 401 (application/json; charset=utf-8)

        {
                "error":"wrong credentials"
        }

+ Response 404 (application/json; charset=utf-8)

        {
                "error":"account not found"
        }
        
+ Response 403 (application/json; charset=utf-8)

        {
                "error":"account inactive"
        }

+ Response 403 (application/json; charset=utf-8)

        {
                "error":"account blocked"
        }

+ Response 429 (application/json; charset=utf-8)

        {
                "error":"too many login attempts"
        }

### Account Logout [DELETE]
Delete account session. This request must be authenticated with the `token`.

+ Response 204 (application/json; charset=utf-8)

        {

        }

## Two Step Verification [/account/login/totp]
Once you enable a 2FA authentication method, the endpoint for account login will return the property `needsSecondFactor` as true. Whenever that is the case, you need to implement also this endpoint in order to provide us with the 6 digit code required to start a session. Failing to do this will result in HTTP errors for all endpoints using the session token.

### 2nd Step [POST]
Provide the 6 digit code after retrieving session token with account credentials. This request must be authenticated with the `token`.

+ Parameters

    + code = `123456` (required, number, `123456`)...The code generated by Google Authenticator app.


+ Response 201 (application/json; charset=utf-8)

        {
            account: "5245bc5b3e66a3b01f0024d4",
            token: "5245bc5b3e66a3b01f2224d4",
            expires: "2013-11-25T15:19:10.000Z",
            needsSecondFactor: false
        }


## 2FA [/account/2fa]
As an extra layer of security you can choose to enable Two Factor Authentication for your account. This feature currently supports only TOTP (Time-based One-Time Password) with the Google Authenticator app which generates one time codes that will be required every time you try to start a new session. Support for channels like U2F (Universal 2nd Factor Authentication) and SMS (Short Message Service) are currently being developed.

### Check 2FA Status [GET]
Retrieve the account 2FA state. This should provide information about 2FA functionality for your account. This request must be authenticated with the `token`.

+ Response 200 (application/json; charset=utf-8)

        {
            use2FA: false,
            totp: {
                configured: false,
                verified; false,
                date: "2013-11-25T15:19:10.000Z"
            },
            u2f: {
                configured: false
            }
        }

## Configuring TOTP [/account/2fa/totp]
As part of the 2FA setup, registering for TOTP is required in order to obtained the URL required to open Google Authenticator app and configure, enable or disable a TOTP.

### Register for TOTP [POST]
Register your account for TOTP. This endpoint will provide you a key (for manual setup) and URL (to create a QRCode) that allows you to configure the Google Authenticator app. This request must be authenticated with the `token`.

+ Response 200 (application/json; charset=utf-8)

        {
            key: "xxx",
            url: "otpauth://totp/xxx?secret=xxx&period=30&issuer=xxx"
        }

+ Response 403 (application/json; charset=utf-8)

        {
                "error":"authenticator already setup"
        }

### Unregister for TOTP [DELETE]
Unregister your account for TOTP. This endpoint will delete the setup for the Google Authenticator app. This request must be authenticated with the `token`.

+ Response 204 (application/json; charset=utf-8)

        {

        }

+ Response 403 (application/json; charset=utf-8)

        {
                "error":"second factor enabled, needs at least one verified method"
        }

+ Response 403 (application/json; charset=utf-8)

        {
                "error":"authenticator not setup"
        }

## Enabling TOTP [/account/2fa/enable]

### Enable TOTP [PUT]
At any time when your account has been configured for 2FA, you can use this endpoint to enable it. This request must be authenticated with the `token`.

+ Response 200 (application/json; charset=utf-8)

        {
            message: "second factor enabled"
        }

+ Response 200 (application/json; charset=utf-8)

        {
            message: "second factor already enabled"
        }


+ Response 403 (application/json; charset=utf-8)

        {
                "error":"no second factor configured"
        }
+ Response 403 (application/json; charset=utf-8)

        {
                "error":"no verified second factor"
        }


## Disabling TOTP [/account/2fa/disable]

### Disable TOTP [PUT]
At any time when your account has been configured for 2FA and is enabled, you can disable it. This request must be authenticated with the `token`.

+ Response 200 (application/json; charset=utf-8)

        {
            message: "second factor disabled"
        }

+ Response 200 (application/json; charset=utf-8)

        {
            message: "second factor already disabled"
        }



# Group Application
Your account can create as many applications as you want. 
Applications must provide a name, a category and the environment it should use. When you create an application three access keys will be automatically created for you. 
These keys will be used in by both your apps and this API to access your applications. Make sure you never share these keys publicly online. 

## Applications [/application{?limit,skip}]

### Get all applications [GET]
Get your active applications. This request must be authenticated with the `token`.

+ Parameters

    + limit = `50` (optional, number, `10`)...The number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 201 (application/json; charset=utf-8)

        {
                "applications":[
                                 {
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "5245bc5b3e66a3b01f0024d4",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "actionCategories": [{
                                            "name": "MyTemplate",
                                            "type": "re.notifica.notification.Alert",
                                            "actions": [{
                                                "label": "follow",
                                                "type": "re.notifica.action.Callback",
                                                "target": "",
                                                "camera": false,
                                                "keyboard": false,
                                                "destructive": false
                                            }]
                                        }],
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }

## Shared Applications [/application/shared{?limit,skip}]

### Get all shared applications [GET]
Get all the active applications that are shared with your account. This request must be authenticated with the `token`.

+ Parameters

    + limit = `50` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 201 (application/json; charset=utf-8)

        {
                "applications":[
                                 {
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "5245bc5b3e66a3b01f0024d4",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "actionCategories": [{
                                            "name": "MyTemplate",
                                            "type": "re.notifica.notification.Alert",
                                            "actions": [{
                                                "label": "follow",
                                                "type": "re.notifica.action.Callback",
                                                "target": "",
                                                "camera": false,
                                                "keyboard": false,
                                                "destructive": false
                                            }]
                                        }],
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }


## New Application [/application]
### Create an application [POST]
Create a new application. This request must be authenticated with the `token`.

+ Parameters

    + name (required, string, `My Amazing App`)...Your application's name.
    + production (required, `boolean`)...If your application is set to production or not.
    + category (required, string, `Business`)...Your application's category.
    + actionCategories (optional, array, `[{"name:"My Template", type:"re.notifica.notification.Alert", actions: [{label:"Reply", type:"re.notifica.action.Callback", target:"", camera:false, keyboard:false, destructive:false}"}]`)...An array of objects that can be used as templates for messages.

+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "application":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }

## Application [/application/{application}]
### Get a specific application [GET]
Get an application object. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "application":{
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "account": "xxxxxxxxxxx",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "actionCategories": [{
                                                                                "name": "MyTemplate",
                                                                                "type": "re.notifica.notification.Alert",
                                                                                "actions": [{
                                                                                    "label": "follow",
                                                                                    "type": "re.notifica.action.Callback",
                                                                                    "target": "",
                                                                                    "camera": false,
                                                                                    "keyboard": false,
                                                                                    "destructive": false
                                                                                }]
                                                                            }],
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }


### Modify a specific application [PUT]
Modify an application. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application changes saved"
        }




### Detele a specific application [DELETE]
Destroy an application. This operation can not be undone. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.



+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application deactivated"
        }


# Group Asset
Storage is an add-on of Notificare. When active this add-on will let you manage files and create groups of assets to be used in your applications.
Therefore this add-on is divided in two different endpoints: assets and asset groups. Assets being the files you can upload to Notificare and asset groups being the groups of files that can be used in an application.

## Assets [/asset{?limit,skip}]
### Get all the assets [GET]
Get all the assets for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

       {
            "assets":[{
                                "_id": "5708dff98f252b8f23fe05100",
                                "application": "5354f0bb3fa544f52ff4cff0",
                                "key": "3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6",
                                "fileName": "/notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6",
                                "contentLength": 59609,
                                "contentType": "image/png",
                                "contentDisposition": "form-data; name=\"file\"; filename=\"Screenshot_2016-04-07-13-17-31.png\"",
                                "originalFileName": "Screenshot_2016-04-07-13-17-31.png",
                                "lastModified": "2016-04-09T10:25:28.129Z",
                                "__v": 0,
                                "customSortOrder": 0
                            },
                            {
                                "_id": "5708dff98f252b8f23fe05100",
                                "application": "5354f0bb3fa544f52ff4cff0",
                                "key": "3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6",
                                "fileName": "/notifications/3d99d18148e6f3dbcf4ff891c9a0ff63b0311feccc7b9d0c8c79fee9b4dde19/e457c97c76bc41ff524af3697cc5236cc06fd982a83f983046fff68ea56b1b6",
                                "contentLength": 59609,
                                "contentType": "image/png",
                                "contentDisposition": "form-data; name=\"file\"; filename=\"Screenshot_2016-04-07-13-17-31.png\"",
                                "originalFileName": "Screenshot_2016-04-07-13-17-31.png",
                                "lastModified": "2016-04-09T10:25:28.129Z",
                                "__v": 0,
                                "customSortOrder": 0
                            },
                         ],
                         "count": 2
       }



### New Asset [POST]
Create an asset in a specific application. Uploads a file to Notificare. The resulting filename is the path of that file inside the notificare storage. This can be used as a reference to the file in further processing or deleting.
The contents of the file should be in the body of the request and with the correct mime-type. So, e.g. an image should be of type `image/png`, `image/jpg` or `image/gif`, a pdf should be `application/pdf` and a video should be `video/mp4`.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (image/jpeg)
    ------BoundaryaQGxWlhjMW7v9kU1
    Content-Disposition: form-data; name="file"; filename="landscapes-202a.jpg"
    Content-Type: image/jpeg


+ Response 201 (application/json; charset=utf-8)

        {
                "_id": "570bff9ff09c7c399e721897"
                "key": "3d99d18148e6f3dbcf4ff891c9a02ffb0311feccc7b9d0c8c79fee9dddde19/51b73467c0665add7abfd4bc47ebfdff843f77f58dcb12cdeb3d0c094f0e9835"
        }

## Asset [/asset/{id}]

### Modify an asset [PUT]
Modify a specific asset.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + id (required, string, `5245bc5b3e66a3b01fff24d4`)...The asset's id.

+ Request (image/jpeg)
    ------BoundaryaQGxWlhjMW7v9kU1
    Content-Disposition: form-data; name="file"; filename="landscapes-202a.jpg"
    Content-Type: image/jpeg


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"asset updated"
        }


### Delete an asset [DELETE]
Delete an asset. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `5245bc5b3e66a3b01fff24d4`)...The asset's id.


+ Response 204 (application/json; charset=utf-8)


## Asset Groups [/asset/group{?limit,skip}]
### Get all the asset groups [GET]
Get all the asset groups for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

       {
            "assetGroups":[{
                                "_id": "56f3444fc34c01653ffccdf0",
                                "application": "5354f0bb3fa54ff52ff4c7c0",
                                "name": "testing",
                                "segment": "5354f0bb3fa54ff52ff4c7c0",
                                "notBefore": null,
                                "notAfter": null,
                                "assets":[
                                            {
                                            "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                            "key": "3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03",
                                            "description": "",
                                            "_id": "56f3444fcff01653c7ccdf1",
                                            "button":{
                                                        "label": "",
                                                        "action": ""
                                                     }
                                            }
                                ]
                            },
                            {
                                "_id": "56f3444fc34c01653c7ccdf0",
                                "application": "5354f0bb3fa544452ff4c7c0",
                                "name": "testing",
                                "segment": "5354f0bb3fa54ff52ff4c7c0",
                                "notBefore": null,
                                "notAfter": null,
                                "assets":[
                                            {
                                            "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                            "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                            "description": "",
                                            "_id": "56f3444fc34c01653c7ccdf1",
                                            "button":{
                                                        "label": "",
                                                        "action": ""
                                                     }
                                            }
                                ]
                            },
                         ],
                         "count": 2
       }


## Asset Groups By Name [/asset/group{?limit,skip}]
### Get all the asset groups by name [GET]
Get all the asset groups for an application. Because asset groups can share the same name you might need to get all asset groups with the same name. Use this endpoint to retrieve assets with the same name.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

       {
            "assetGroups":[{
                                "_id": "56f3444fc34c01653ffccdf0",
                                "application": "5354f0bb3fa54ff52ff4c7c0",
                                "name": "testing",
                                "segment": "5354f0bb3fa54ff52ff4c7c0",
                                "notBefore": null,
                                "notAfter": null,
                                "assets":[
                                            {
                                            "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                            "key": "3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03",
                                            "description": "",
                                            "_id": "56f3444fcff01653c7ccdf1",
                                            "button":{
                                                        "label": "",
                                                        "action": ""
                                                     }
                                            }
                                ]
                            },
                            {
                                "_id": "56f3444fc34c01653c7ccdf0",
                                "application": "5354f0bb3fa544452ff4c7c0",
                                "name": "testing",
                                "segment": "5354f0bb3fa54ff52ff4c7c0",
                                "notBefore": null,
                                "notAfter": null,
                                "assets":[
                                            {
                                            "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                            "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                            "description": "",
                                            "_id": "56f3444fc34c01653c7ccdf1",
                                            "button":{
                                                        "label": "",
                                                        "action": ""
                                                     }
                                            }
                                ]
                            },
                         ],
                         "count": 2
       }



### New Asset Group [POST]
Create an asset group in a specific application. This allows you to group assets in a group can then later be retrieved in your applications using the SDKs.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + name (required, string, `My Banner Set`)...The asset group's name
    + segment (optional, string, `5354f0bb3fa54ff52ff4c7c0`)...The segment for this asset group
    + notBefore (optional, date, `2012-11-28T15:31:54`)...Asset groups will not be visible before this date.
    + notAfter (optional, date, `2014-11-28T15:31:54`)...Asset groups will not be visible after this date.
    + assets (required, array, `[{ "title": "My Banner Set"... }]`)...An array of objects.

+ Request (application/json)

        {
                "name": "My Banner Set",
                "segment": "5354f0bb3fa54ff52ff4c7c0",
                "notBefore": null,
                "notAfter": null,
                "assets":[
                            {
                                "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                "description": "",
                                "_id": "56f3444fc34c01653c7ccdf1",
                                "button":{
                                            "label": "",
                                            "action": ""
                                         }
                            },
                            {
                                "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                "description": "",
                                "_id": "56f3444fc34c01653c7ccdf1",
                                "button":{
                                            "label": "",
                                            "action": ""
                                         }
                            }
                ]
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "assetGroup": {
                                "_id": "56f3444fc34c01653c7ccdf1"
                              }
        }


## Asset Group [/asset/group/{id}]

### Get an asset group [GET]
Get a specific asset group.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `5245bc5b3e66a3b01f0024d4`)...The asset group's id.

+ Response 200 (application/json; charset=utf-8)

       {
            "assetGroup":{
                                "_id": "56f3444fc34c01653ffccdf0",
                                "application": "5354f0bb3fa54ff52ff4c7c0",
                                "name": "testing",
                                "segment": "5354f0bb3fa54ff52ff4c7c0",
                                "notBefore": null,
                                "notAfter": null,
                                "assets":[
                                            {
                                            "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                            "key": "3d99d18148e6f3dbcf4ff891c9a02646ff311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b8ff1c61faa7b79036fd2670db2840de979cab03",
                                            "description": "",
                                            "_id": "56f3444fcff01653c7ccdf1",
                                            "button":{
                                                        "label": "",
                                                        "action": ""
                                                     }
                                            }
                                ]
                            }
       }


### Modify an asset group [PUT]
Modify a specific asset group.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + id (required, string, `5245bc5b3e66a3b01f0024d4`)...The asset group's id.
    + name (required, string, `My Banner Set`)...The asset group's name
    + segment (optional, string, `5354f0bb3fa54ff52ff4c7c0`)...The segment for this asset group
    + notBefore (optional, date, `2012-11-28T15:31:54`)...Asset groups will not be visible before this date.
    + notAfter (optional, date, `2014-11-28T15:31:54`)...Asset groups will not be visible after this date.
    + assets (required, array, `[{ "title": "My Banner Set"... }]`)...An array of objects.

+ Request (application/json)

        {
                "name": "My Banner Set",
                "segment": "5354f0bb3fa54ff52ff4c7c0",
                "notBefore": null,
                "notAfter": null,
                "assets":[
                            {
                                "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                "description": "",
                                "_id": "56f3444fc34c01653c7ccdf1",
                                "button":{
                                            "label": "",
                                            "action": ""
                                         }
                            },
                            {
                                "title": "Screen Shot 2016-03-24 at 00.04.49.png",
                                "key": "3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/c76c6363a7e014fae1586fa9b83b1c61faa7b79036fd2670db2840de979cab03",
                                "description": "",
                                "_id": "56f3444fc34c01653c7ccdf1",
                                "button":{
                                            "label": "",
                                            "action": ""
                                         }
                            }
                ]
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message": "asset group updated"
        }

### Delete an asset group [DELETE]
Delete an asset group. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `5245bc5b3e66a3b01fff24d4`)...The asset group's id.


+ Response 200 (application/json; charset=utf-8)
        {
                "message": "asset group removed"
        }


# Group Automation
Automation is an add-on of Notificare. It will give you access to mechanisms that can automate how you send notifications.

## Datasources [/datasource]
### Get all the datasources [GET]
Get all the datasources for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Response 200 (application/json; charset=utf-8)

       {
            "datasources":[{
                                "_id":"55c0c7f4fed3e3bb70e2e86b",
                                "type":"feed",
                                "application":"5489b42ff23e5815132b492a",
                                "lastRun":"2015-11-13T15:19:10.698Z",
                                "name":"Blog",
                                "config":{
                                            "url":"http://notifica.re/blog/feed.xml",
                                            "messageType":"re.notifica.notification.Alert"
                                         },
                                "feedMap":"tag_newsletter",
                                "lastParsed":"2015-11-12T08:28:53.000Z",
                                "categoryMap":[],
                                "mapTarget":"tag",
                                "mapType":"feed",
                                "nextRun":"2015-11-13T15:34:10.698Z",
                                "active":true
                            },
                            {
                                "_id":"55c0c7f4fed3e3bb70e2e86b",
                                "type":"feed",
                                "application":"5489b42ff23e5815132b492a",
                                "lastRun":"2015-11-13T15:19:10.698Z",
                                "name":"Blog",
                                "config":{
                                            "url":"http://notifica.re/blog/feed.xml",
                                            "messageType":"re.notifica.notification.Alert"
                                         },
                                "feedMap":"tag_newsletter",
                                "lastParsed":"2015-11-12T08:28:53.000Z",
                                "categoryMap":[],
                                "mapTarget":"tag",
                                "mapType":"feed",
                                "nextRun":"2015-11-13T15:34:10.698Z",
                                "active":true
                            },
                         ],
                         "count": 2
       }



### New Datasource [POST]
Create a datasource.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + name (required, string, `My Feed`)...The source's name
    + type (required, string, `feed`)...The type of datasource. Accepts one of these: 'feed', 'upload'.
    + config (required, object, `{"url":"http://notifica.re/blog/feed.xml","messageType":"re.notifica.notification.Alert"}`)...An object containing the URL's source and the notification type.
    + feedMap (required, string, `tag_newsletter`)...A string representing a tag or a segment Id.
    + mapType (required, string, `feed`)...The type of mapping for the source. Accepts one of these: 'feed', 'category'.
    + mapTarget (required, string, `tag`)...The mapping target for the source. Accepts one of these: 'tag', 'segment'.
    + categoryMap (optional, object, `{"category":"Newsletter","target":"tag_newsletter"}`)...An object containing the category and the target's tag or segment Id. Only used and required if you choose category in mapType.


+ Request (application/json)

        {
                "name": "My Feed",
                "type": "feed",
                "config": {
                            "url":"http://notifica.re/blog/feed.xml",
                            "messageType":"re.notifica.notification.Alert"
                          },
                "feedMap": "tag_newsletter",
                "mapType": "tag"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "datasource": {
                                "_id": "56f3444fc34c01653c7ccdf1"
                              }
        }


## Datasource [/datasource/{id}]

### Get a specific the datasource [GET]
Get a specific datasource.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `55c0c7f4fed3e3ff70e2e86b`)...The source's id.

+ Response 200 (application/json; charset=utf-8)

       {
            "datasource":{
                                "_id":"55c0c7f4fed3e3bb70e2e86b",
                                "type":"feed",
                                "application":"5489b42ff23e5815132b492a",
                                "lastRun":"2015-11-13T15:19:10.698Z",
                                "name":"Blog",
                                "config":{
                                            "url":"http://notifica.re/blog/feed.xml",
                                            "messageType":"re.notifica.notification.Alert"
                                         },
                                "feedMap":"tag_newsletter",
                                "lastParsed":"2015-11-12T08:28:53.000Z",
                                "categoryMap":[],
                                "mapTarget":"tag",
                                "mapType":"feed",
                                "nextRun":"2015-11-13T15:34:10.698Z",
                                "active":true
                            }
       }



### Modify a datasource [PUT]
Modify a datasource.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + id (required, string, `5245bc5b3e66a3b01f0024d4`)...The source's id.
    + name (required, string, `My Feed`)...The source's name
    + type (required, string, `feed`)...The type of datasource. Accepts one of these: 'feed', 'upload'.
    + config (required, object, `{"url":"http://notifica.re/blog/feed.xml","messageType":"re.notifica.notification.Alert"}`)...An object containing the URL's source and the notification type.
    + feedMap (required, string, `tag_newsletter`)...A string representing a tag or a segment Id.
    + mapType (required, string, `feed`)...The type of mapping for the source. Accepts one of these: 'feed', 'category'.
    + mapTarget (required, string, `tag`)...The mapping target for the source. Accepts one of these: 'tag', 'segment'.
    + categoryMap (optional, object, `{"category":"Newsletter","target":"tag_newsletter"}`)...An object containing the category and the target's tag or segment Id. Only used and required if you choose category in mapType.


+ Request (application/json)

        {
                "name": "My Feed",
                "type": "feed",
                "config": {
                            "url":"http://notifica.re/blog/feed.xml",
                            "messageType":"re.notifica.notification.Alert"
                          },
                "feedMap": "tag_newsletter",
                "mapType": "tag"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"datasource updated"
        }

### Delete a datasource [DELETE]
Delete a datasource. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + datasource (required, string, `5245bc5b3e66a3b01f0024d4`)...The source's id.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"datasource deleted"
        }


## New Datasource Test [/datasource/test]

### Test a new datasource feed [POST]
Test a datasource feed before actually creating it.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + config (required, object, `{"url":"http://notifica.re/blog/feed.xml","messageType":"re.notifica.notification.Alert"}`)...An object containing the URL's source and the notification type.

+ Request (application/json)

        {
                "config": {
                            "url":"http://notifica.re/blog/feed.xml",
                            "messageType":"re.notifica.notification.Alert"
                }
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "feed": {
                            "meta": {
                                    "title": "Notificare",
                                    "description": "Our Blog",
                                    "date": "2016-06-24T09:00:00.000Z"
                            },
                            "items": [{
                                    "title": "MobileStrategy and Notificare announce...",
                                    "description": "<p><br />\n<strong>Press release</strong>...",
                                    "date": "2016-06-24T09:00:00.000Z",
                                    "link": "http://notifica.re/blog/2016/06/24/MobileStrategy-Notificare-Partnership/"
                            }, {
                                    "title": "Notificare receives ISO 27001 certification",
                                    "description": "<p><br />\nFrom day 1, we set out to provide...",
                                    "date": "2016-02-26T13:02:00.000Z",
                                    "link": "http://notifica.re/blog/2016/02/26/Notificare-ISO-Certification/"
                            }]
                }
       }



## Existing Datasource Test [/datasource/{id}/test]

### Test an existing datasource feed [PUT]
Test a datasource feed that is already created.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + id (required, string, `5245bc5b3e66a3b01f0024d4`)...The source's id.

+ Response 200 (application/json; charset=utf-8)

        {
                "feed": {
                            "meta": {
                                    "title": "Notificare",
                                    "description": "Our Blog",
                                    "date": "2016-06-24T09:00:00.000Z"
                            },
                            "items": [{
                                    "title": "MobileStrategy and Notificare announce...",
                                    "description": "<p><br />\n<strong>Press release</strong>...",
                                    "date": "2016-06-24T09:00:00.000Z",
                                    "link": "http://notifica.re/blog/2016/06/24/MobileStrategy-Notificare-Partnership/"
                            }, {
                                    "title": "Notificare receives ISO 27001 certification",
                                    "description": "<p><br />\nFrom day 1, we set out to provide...",
                                    "date": "2016-02-26T13:02:00.000Z",
                                    "link": "http://notifica.re/blog/2016/02/26/Notificare-ISO-Certification/"
                            }]
                }
       }


# Group Beacon
Methods to manage your beacons. Be sure to add the `regionConfig.proximityUUID` in your Application and create a Region first.
Also beacons require that you create a triggered message previously.


## Beacons [/beacon/forregion/{region}]
### Get all beacons for a certain region [GET]
Get all beacons for a certain region.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacons":[{
                       "_id":"5245bc5b3e66a3b01f0024d4",
                       "notification":"6245bc5b3e66a3b01f0024d5",
                       "name": "My Beacon",
                       "major": "654321",
                       "minor": "123456",
                       "proximity": "immediate"
                },
                {
                       "_id":"5245bc5b3e66a3b01f0024d4",
                       "notification":"6245bc5b3e66a3b01f0024d5",
                       "name": "My Beacon",
                       "major": "654321",
                       "minor": "123456",
                       "proximity": "immediate"
                }]
        }

## New Beacon [/beacon]

### Create a new beacon for a region [POST]
Create a new beacon for a region. To complete this request you must create a triggered Notification first. 
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + name (required, string, `My Beacon`)...Your beacon's name
    + major (required, number, `654321`)...Your beacon's major identifier (must match a previously created identifier of a region)
    + minor (required, number, `123456`)...Your beacon's minor identifier (must be unique per major)
    + proximity (optional, string, `immediate`)...Your notification proximity. Accepts one of these: 'immediate', 'near' and 'far'. (deprecated)
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4`)...An Id of a previously created notification. (deprecated)
    + proximityNotifications (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + batteryLevel (optional, number, `10`)...An object representing the battery level of this beacon.
    + purpose (optional, string, `general`)...An object representing the purpose of the beacon. Accepts one of these: 'general', 'pay', 'info', 'staff', 'admin'.
    + latitude (optional, number, `5.435`)...An integer representing the beacon's latitude.
    + longitude (optional, number, `3.435`)...An integer representing the beacon's longitude.
    + data (optional, mixed, `{"mykey":"myvalue"}`)...A free form object that can be assigned to a beacon.
    + triggers (optional, `boolean`)...Set to true if this beacon can be used in triggers. Max. number of beacons that can use triggers is limited to 10.



+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "beacon":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                              }
        }

## Beacon [/beacon/{id}]
### Get a beacon object [GET]
Get a beacon object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "beacons":{
                                   "_id":"5245bc5b3e66a3b01f0024d4",
                                   "notification":"6245bc5b3e66a3b01f0024d5",
                                   "name": "My Beacon",
                                   "major": "654321",
                                   "minor": "123456",
                                   "proximity": "immediate"
        }


### Modify a beacon [PUT]
Modify a beacon.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.
    + name (required, string, `My Beacon`)...Your beacon's name
    + major (required, number, `654321`)...Your beacon's major identifier (must match a previously created identifier of a region)
    + minor (required, number, `123456`)...Your beacon's minor identifier (must be unique per major)
    + proximity (optional, string, `immediate`)...Your notification proximity. Accepts one of these: 'immediate', 'near' and 'far'. (deprecated)
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4`)...An Id of a previously created notification. (deprecated)
    + proximityNotifications (optional, object, `{"immediate":"","near":"","far":""}`)...An object containing three previously created message Ids for each proximity level.
    + batteryLevel (optional, number, `10`)...An object representing the battery level of this beacon.
    + purpose (optional, string, `general`)...An object representing the purpose of the beacon. Accepts one of these: 'general', 'pay', 'info', 'staff', 'admin'.
    + latitude (optional, number, `5.435`)...An integer representing the beacon's latitude.
    + longitude (optional, number, `3.435`)...An integer representing the beacon's longitude.
    + data (optional, mixed, `{"mykey":"myvalue"}`)...A free form object that can be assigned to a beacon.
    + triggers (optional, `boolean`)...Set to true if this beacon can be used in triggers. Max. number of beacons that can use triggers is limited to 10.


+ Request (application/json)

        {
                "notification":"12345",
                "name": "My Beacon",
                "major": "654321",
                "minor": "123456",
                "proximity": "immediate"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon updated"
        }


### Delete a beacon [DELETE]
Delete a beacon. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + beacon (required, string, `5245bc5b3e66a3b01f0024d4`)...The beacon id of an active beacon.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"beacon deleted"
        }



# Group Device
Methods to manage devices. 
Use these methods to retrieve information about devices for an application, for a specific user, for a specific tag or in a specific location.
Management of devices is exclusively made by our SDK libraries therefore you only get access to read operations.

## Devices [/device{?limit,skip}]

### Get all the devices for a specific application [GET]
Get all the devices for a specific application. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,"last_active":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }



## Device [/device/{deviceID}]

### Get a specific device based on the deviceID [GET]
Get a specific device based on the deviceID.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + deviceID (required, string, `00a9b9bf-xxx9278-64d6a3f22476`)...The deviceID is the unique identifier provided by APNS or GCM.


+ Response 200 (application/json; charset=utf-8)

        {
                "device":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }


        }


## User Registration [/device/{deviceID}/user]

### Register User to Device [PUT]
Register a userID and userName to a device. If you have the Users & Authentication add-on, you can delegate user registration to you back-end API. This will prevent you apps from registering users with only the app keys and instead you can take care of this at the server side. Use this method to add a userID and userName to a device.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + deviceID (required, string, `00a9b9bf-xxx9278-64d6a3f22476`)...The deviceID is the unique identifier provided by APNS or GCM.

+ Request (application/json; charset=utf-8)

        {
                "userID": "12345678",
                "userName": "John Doe"
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "device updated"
        }

## User Unregistration [/device/{deviceID}/user]

### Unregister User from a device [DELETE]
Unregister a userID and userName from a device. If you have the Users & Authentication add-on, you can delegate user registration to you back-end API. This will prevent you apps from registering users with only the app keys and instead you can take care of this at the server side. Use this method to remove a userID and userName from a device.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + deviceID (required, string, `00a9b9bf-xxx9278-64d6a3f22476`)...The deviceID is the unique identifier provided by APNS or GCM.

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "device updated"
        }


## Devices for User [/device/foruser/{user}{?limit,skip}]

### Get all the devices for a specific user [GET]
Get all the devices for a specific user. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }





## Devices For Tag [/device/fortag/{tag}{?limit,skip}]

### Get all the devices for a specific tag [GET]
Get all the devices for a specific tag. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + tag (required, string, `toys`)...The tag the device is associated with
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel
                              }
                ],
                "count": 2
                          
        }



## Devices for Location [/device/bylocation/{latitude}/{longitude}/{distance}{?limit,skip}]

### Get all the devices in a specific location [GET]
Get all the devices in a specific location. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Parameters

    + latitude (required, float, `4.2345`)...The desired latitude
    + longitude (required, float, `5.6789`)...The desired longitude
    + distance (required, float, `1.5`)...The distance in kilometers of your search area relative to the latitude and longitude
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2
                          
        }


## Devices within Bounds [/device/bylocation/{lat1}/{long1}/{lat2}/{long2}{?limit,skip}]

### Get all the devices withing a specific bounds [GET]
Get all the devices withing a specific bounds. Bounds form a rectangle from the points at its south-west and north-east corners. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Parameters

    + lat1 (required, float, `4.2345`)...The desired south-east latitude
    + long1 (required, float, `5.6789`)...The desired south-east longitude
    + lat2 (required, float, `4.2345`)...The desired north-west latitude
    + long2 (required, float, `5.6789`)...The desired north-west longitude
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2

        }

## Devices for Region [/device/forregion/{region}{?limit,skip}]

### Get all the devices in a specific region [GET]
Get all the devices in a specific region. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of the region
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2

        }


## Devices for Polygon [/device/bygeometry{?limit,skip}]

### Get all the devices in a specific geometric shape. [POST]
Get all the devices in a specific geometric shape. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Request (application/json; charset=utf-8)

        {
                "geometry": [
                              [4.2345,5.6789],[4.2345,5.6789],[4.2345,5.6789],[4.2345,5.6789],[4.2345,5.6789]
                            ]
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "devices":[
                              {
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[4.2345,5.6789],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              },
                               {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "appVersion":"1.0",
                                  "application":"52458981394c07916000492c",
                                  "deviceID":"00a9b9bf-c099-45aa-9278-64d6a3f22476",
                                  "osString":"Mac OS X 10.9.2",
                                  "osVersion":"10.9.2",
                                  "platform":"Mac OS X",
                                  "sdkVersion":"0.0.1",
                                  "transport":"Websocket",
                                  "userID":"info@notifica.re",
                                  "timeZoneOffset":-5,
                                  "lastActive":"2014-03-11T16:20:55.084Z",
                                  "active":true,
                                  "tags":[
                                          toys
                                  ],
                                  "location":{
                                               "coordinates":[],
                                               "type":"Point"
                                  },
                                  "language":"en",
                                  "deviceString":"MacIntel"
                              }
                ],
                "count": 2

        }



# Group Event
Get all the Events stored for a specific application.

## Event Types:
| type | description |
|:---------:|----------------------------------|
| re.notifica.event.application.Install | Stored whenever a new device installs the app. |
| re.notifica.event.application.Uninstall | Stored whenever an app was removed from the device, as reported by APNS or GCM feedback. |
| re.notifica.event.application.Open | Stored whenever the application becomes active. |
| re.notifica.event.application.Close | Stored whenever the application goes to background. |
| re.notifica.event.notification.Influenced | Stored whenever a notification when app is not active. |
| re.notifica.event.notification.Receive | Stored whenever a notification arrives. |
| re.notifica.event.notification.Open | Stored whenever a notification is open. |
| re.notifica.event.region.Session | Stored whenever a user enters and leaves a region. |
| re.notifica.event.beacon.Session | Stored whenever a user is on the proximity of a beacon. |
| re.notifica.event.pass.Add | Stored whenever a pass is added to a device's wallet. |
| re.notifica.event.pass.Remove | Stored whenever a pass is removed from a device's wallet. |
| re.notifica.event.pass.Redeem | Stored whenever a pass is redeemed. |
| re.notifica.event.product.Buy | Stored whenever a purchase is done. |
| re.notifica.event.product.Buy.{store} | Stored whenever a purchase is done, where store is AppStore or GooglePlay. |
| re.notifica.event.product.Buy.{store}.{identifier} | Stored whenever a purchase is done, where store is AppStore or GooglePlay. |

## Event Collection [/event/fortype/{type}{?limit,skip,since,before,region}]

### Get all the events for a specific application [GET]
Get all the Events types stored for a specific application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The type of event.
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip
    + since =  (optional, date, `2014-10-03`)...When provided will only retrieve events after this date
    + before =  (optional, date, `2014-10-04`)...When provided will only retrieve events before this date (only available when a since date is provided)
    + region = (optional, string, `542f1868d341d51284b`)...The region's id of an event of type re.notifica.event.region.Session or re.notifica.event.beacon.Session

+ Response 200 (application/json; charset=utf-8)

        {
                "events":[
                              {
                                "_id":"542f1868d341d51284b",
                                "application":"5354f3545a544452ff4c7c0",
                                "userID":null,
                                "sessionID":"5SX4tAmO345juHL",
                                "time":"2014-10-03T21:43:04.231Z",
                                "type":"re.notifica.event.application.Install"
                              },
                              {
                                "_id":"542f153401d51284b",
                                "application":"5354f3545a544452ff4c7c0",
                                "userID":null,
                                "sessionID":"5SX4tAsd534MjuHL",
                                "time":"2014-10-03T21:43:04.231Z",
                                "type":"re.notifica.event.application.Install"
                              },
                ]

        }

## Event [/event/{id}]

### Get an event object [GET]
Get a specific event object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `542f1868d341d51284b`)...The event's Id.


+ Response 200 (application/json; charset=utf-8)

        {
                "event":{
                             "_id":"542f153401d51284b",
                             "application":"5354f3545a544452ff4c7c0",
                             "userID":null,
                             "sessionID":"5SX4tAsd534MjuHL",
                             "time":"2014-10-03T21:43:04.231Z",
                             "type":"re.notifica.event.application.Install"
                           }

        }


# Group Export
Methods for exporting users and devices.

## Exports [/export]

### Get all export jobs for an application [GET]
Get all export jobs for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.



+ Response 200 (application/json; charset=utf-8)

        {
                "exportJobs":[
                                {
                                   "_id":"54fec699beb5cb2f6f9839ed",
                                   "application":"5354f08474adc4183214c143",
                                   "data":null,
                                   "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                   "date":"2015-03-10T10:25:29.340Z",
                                   "status":"success",
                                   "type":"re.notifica.export.User"
                                }
                             ]

        }


## Export Devices [/export/re.notifica.export.Device]
### Export Devices [POST]
Export all devices for an application. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + all (optional, boolean, `true`)...Specify if export job should include all devices, including inactive ones
    + includeTags (optional, boolean, `true`)...Specify if export job should include all device tags
    + tagsSeparator (optional, string, `-`)...Specify if export jobs should use a different separator for the tags. By default we will use |


+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "all": true,
                    "includeTags": true,
                    "tagsSeparator": "-"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }


## Export Users [/export/re.notifica.export.User]
### Export Users [POST]
Export all users for an application. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + all (optional, boolean, `true`)...Specify if export job should include all users, including inactive ones
    + showSegments (optional, mixed, `true`)...Specify if export job should include all segments. This property can also be an array of segment IDs, if you are looking to include only certain segments. Please note that export jobs will fail if you have users with more than 2000 segments
    + showCombinedSegments (optional, boolean, `re.notifica.export.Device`)...When showSegments is true or it includes a list of segments, you can specify if export jobs should show all segments in one column or in separate columns.
    + useSegmentNames (optional, boolean, `true`)...When showSegments is true or it includes a list of segments, you can specify if export jobs should contain the name of the segments instead of their IDs
    + showPreferences (optional, boolean, `true`)...When showSegments is true or it includes a list of segments, you can specify if export jobs should also contain user selectable segments


+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "all": true,
                    "showSegments": [
                        "5245bc5b3e66a3b01f0024d4",
                        "5245bc5b3e66a3b01f0024d5"
                    ],
                    "showCombinedSegments": true
                    "useSegmentNames": true
                    "showPreferences": false
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }


## Export User Data [/export/re.notifica.export.UserData]
### Export User Data [POST]
Export all the data of a specific user. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + userID (optional, string, `john@doe.com`)...Specify which user you want to export data from


+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "userID": "john@doe.com"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Regions [/export/re.notifica.export.Region]
### Export Regions [POST]
Export all regions for an application. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Beacons [/export/re.notifica.export.Beacon]
### Export Beacons [POST]
Export all beacons for an application. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Notifications [/export/re.notifica.export.Notification]
### Export Notifications [POST]
Export notifications for an application. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + all (optional, boolean, `true`)...Specify if export job should include all notifications, including archived ones
    + since (optional, string, `YYYY-MM-DD`)...Specify if export job should only include notifications created after a certain date
    + before (optional, string, `YYYY-MM-DD`)...Specify if export job should only include notifications created before a certain date
    + useSegmentNames (optional, boolean, `true`)...Specify if export jobs should contain the name of the segments instead of their IDs


+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "all": true,
                    "since": "2018-01-01",
                    "before": "2018-12-01"
                    "useSegmentNames": true
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Replies [/export/re.notifica.export.Reply]
### Export Replies [POST]
Export replies for a specific notification. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of the notification you wish to export replies from

+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "notification": "5245bc5b3e66a3b01f0024d4"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Events [/export/re.notifica.export.Event]
### Export Events [POST]
Export all the events for a certain type. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.event.notification.Open`)...The type of the event you wish to export records from
    + since (optional, string, `YYYY-MM-DD`)...Specify if export job should only include events created after a certain date
    + before (optional, string, `YYYY-MM-DD`)...Specify if export job should only include events created before a certain date
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is any `re.notifica.event.notification.*`, optionally you can specify the ID of a notification to include only events for that notification
    + region (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is `re.notifica.event.region.Session`, optionally you can specify the ID of a region to include only events for that region
    + fence (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is `re.notifica.event.beacon.Session`, optionally you can specify the ID of a region (where the beacons are located) to include only events for those beacons
    + serial (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is any `re.notifica.event.pass.*`, optionally you can specify the serial of a pass to include only events for that pass
    + group (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is any `re.notifica.event.asset.*`, optionally you can specify the ID of an asset group to include only events for that asset group
    + scannable (optional, string, `5245bc5b3e66a3b01f0024d4`)...If type is any `re.notifica.event.scannable.*`, optionally you can specify the ID of a scannable to include only events for that scannable


+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "type": "re.notifica.event.notification.Open",
                    "notification": "5245bc5b3e66a3b01f0024d4",
                    "since": "2018-01-01",
                    "before": "2018-12-01"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Export Campaigns [/export/re.notifica.export.Campaign]
### Export Campaigns [POST]
Export replies for a specific notification. This job might take some time to finish, check the export result endpoint to obtain information about the status of this export job.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + campaign (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of the campaign you wish to export results from

+ Request (application/json; charset=utf-8)

        {
                "data": {
                    "campaign": "5245bc5b3e66a3b01f0024d4"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "exportJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }



## Export [/export/{export}]

### Get an export job object [GET]
Get a specific export job object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + id (required, string, `542f1868d341d51284b`)...The export job Id.


+ Response 200 (application/json; charset=utf-8)

        {
                "exportJob":{
                                                               "_id":"54fec699beb5cb2f6f9839ed",
                                                               "application":"5354f08474adc4183214c143",
                                                               "data": {
                                                                  "all": true,
                                                                  "includeTags": true,
                                                                  "tagsSeparator": "|",
                                                                  "useSegmentNames": true,
                                                                  "showCombinedSegments":  true,
                                                                  "showPreferences": true,
                                                                  "showSegments": ["5354f08474adc4183214c143"],
                                                                  "since": "2017-01-12",
                                                                  "before": "2017-01-13",
                                                                  "type": "re.notifica.event.application.Open",
                                                                  "region": "5354f08474adc4183214c143",
                                                                  "fence": "5354f08474adc4183214c143",
                                                                  "serial": "5354f08474adc4183214c143",
                                                                  "notification": "5354f08474adc4183214c143",
                                                                  "campaign": "5354f08474adc4183214c143",
                                                                  "userID": "5354f08474adc4183214c143"
                                                               },
                                                               "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                                               "date":"2015-03-10T10:25:29.340Z",
                                                               "status":"success",
                                                               "type":"re.notifica.export.User"
                                                            }

        }

### Delete Export [DELETE]
Delete an export job. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + export (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an export job.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"export job deleted"
        }


## Exports for Type [/export/fortype/{type}]

### Get all export jobs of a specific type [GET]
Get all export jobs of a specific type.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + type (required, string, `re.notifica.export.User`)...The export type


+ Response 200 (application/json; charset=utf-8)

        {
                "exportJobs":[
                                {
                                   "_id":"54fec699beb5cb2f6f9839ed",
                                   "application":"5354f08474adc4183214c143",
                                   "data": {
                                     "all": true,
                                     "includeTags": true,
                                     "tagsSeparator": "|",
                                     "useSegmentNames": true,
                                     "showCombinedSegments":  true,
                                     "showPreferences": true,
                                     "showSegments": ["5354f08474adc4183214c143"],
                                     "since": "2017-01-12",
                                     "before": "2017-01-13",
                                     "type": "re.notifica.event.application.Open",
                                     "region": "5354f08474adc4183214c143",
                                     "fence": "5354f08474adc4183214c143",
                                     "serial": "5354f08474adc4183214c143",
                                     "notification": "5354f08474adc4183214c143",
                                     "campaign": "5354f08474adc4183214c143",
                                     "userID": "5354f08474adc4183214c143"
                                  },
                                   "result":"created export file export-user-1425983129369.csv (919 bytes)",
                                   "date":"2015-03-10T10:25:29.340Z",
                                   "status":"success",
                                   "type":"re.notifica.export.User"
                                }
                             ]

        }

## Export Result [/export/result/{export}]

### Get a specific export job result [GET]
Get a specific export job result. This endpoint will only be available for export jobs with a status equal to success.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + export (required, string, `54fec699beb5cb2f6f9839ed`)...The id of a export job


## Export Download Link [/export/download/{export}]

### Create a download link for an export job [POST]
Create a temporary download link of the export job results. This endpoint will only be available for export jobs with a status equal to success. Please also note that this link will only be available for 5 minutes. All export files will be located at https://push.notifica.re/export/download/{token}.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + export (required, string, `54fec699beb5cb2f6f9839ed`)...The id of a export job

+ Response 200 (application/json; charset=utf-8)

        {
           "token":"54fec699beb5cb2f6f9839ed/54fec699beb5cb2f6f9839ed",
           "expires":"2015-03-10T10:25:29.340Z"
        }

# Group Geo
Methods for retrieving information about timezone, country, forward and reverse geocoding.

## Timezone & Country [/geo/timezone]

### Get information about a timezone and country [GET]
Get information about a timezone and country for a given latitude or longitude.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + latitude (required, number, `52`)...The latitude
    + longitude (required, number, `2`)...The longitude


+ Response 200 (application/json; charset=utf-8)

        {
                "timezone":{
                                  "_id":"54fec699beb5cb2f6f9839ed",
                                  "referenceKey":"276",
                                  "abbreviation": "CET",
                                  "countryCode":"NL",
                                  "start":"2015-03-10T10:25:29.340Z",
                                  "name":"Europe/Amsterdam",
                                  "countryName":"Netherlands",
                                  "dst": false,
                                  "timeZoneOffset": 1
                               }

        }

## Forward Geocoding [/geo/search]

### Get latitude and longitude [GET]
Get information about latitude and longitude of a given address, place, city or country.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + search (required, string, `Meerum`)...The address to search for


+ Response 200 (application/json; charset=utf-8)

        {
                "locations": [
                               {
                                  "license":"Data (c) OpenStreetMap...",
                                  "displayName":"16, Marconistraat, Rotterdam, Netherlands",
                                  "boundingBox": [52, 52, 2, 2],
                                  "address":"Marconistraat 16",
                                  "latitude": 52,
                                  "longitude": 2
                               },
                               {
                                 "license":"Data (c) OpenStreetMap...",
                                 "displayName":"16, Marconistraat, Rotterdam, Netherlands",
                                 "boundingBox": [52, 52, 2, 2],
                                 "address":"Marconistraat 16",
                                 "latitude": 52,
                                 "longitude": 2
                               }
                             ]

        }


## Reverse Geocoding [/geo/reverse]

### Get address from latitude & longitude [GET]
Get information about an address for a given latitude and longitude.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + latitude (required, number, `52`)...The latitude
    + longitude (required, number, `2`)...The longitude


+ Response 200 (application/json; charset=utf-8)

        {
                "locations": {
                                   "license":"Data (c) OpenStreetMap...",
                                   "displayName":"16, Marconistraat, Rotterdam, Netherlands",
                                   "boundingBox": [52, 52, 2, 2],
                                   "address":"Marconistraat 16"
                              }

        }



# Group Import
Methods for importing collections of items. Files are assumed to be uploaded to Notificare Storage before they can be used in a new import. Use this [endpoint](http://docs.notificare.apiary.io/#reference/upload) to upload a file.


## Imports [/import]
### Get all the import objects [GET]
Get all the import objects.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Response 200 (application/json; charset=utf-8)

        {


        }
                "importJobs":[{
                                   "_id":"545cc517ff584870b89fb98",
                                   "account":"50d771ff87e53afff2600001c",
                                   "application":"5354f0bbdddd4452ff4c7c0",
                                   "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                   "data":{
                                            "user_segment":"53a0a047fff17d3215a94f6",
                                            "clear":false
                                          },
                                   "result":"imported 0 records, skipped 3 records",
                                   "date":"2014-11-07T13:11:51.316Z",
                                   "status":"success",
                                   "type":"re.notifica.import.UserSegment"
                              }]
        }

## Import By Type [/import/{type}]
### Get all the import objects by type [GET]
Get all the import objects by type.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.import.UserSegment`)...The import type of a previously created job.

+ Response 200 (application/json; charset=utf-8)

        {


        }
                "importJobs":[{
                                   "_id":"545cc517ff584870b89fb98",
                                   "account":"50d771ff87e53afff2600001c",
                                   "application":"5354f0bbdddd4452ff4c7c0",
                                   "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                   "data":{
                                            "user_segment":"53a0a047fff17d3215a94f6",
                                            "clear":false
                                          },
                                   "result":"imported 0 records, skipped 3 records",
                                   "date":"2014-11-07T13:11:51.316Z",
                                   "status":"success",
                                   "type":"re.notifica.import.UserSegment"
                              }]
        }

## Import [/import/{import}]
### Get a specific import object [GET]
Get an import object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + import (required, string, `5245bc5b3e66a3b01f0024d4`)...The import id of a previously created job.


+ Response 200 (application/json; charset=utf-8)

        {
                "importJob":{
                                "_id":"545cc517ff584870b89fb98",
                                "account":"50d771ff87e53afff2600001c",
                                "application":"5354f0bbdddd4452ff4c7c0",
                                "path":"/imports/3d99d18148e6f3dbcf4ffccc...",
                                "data":{
                                      "user_segment":"53a0a047fff17d3215a94f6",
                                      "clear":false
                                },
                                "result":"imported 0 records, skipped 3 records",
                                "date":"2014-11-07T13:11:51.316Z",
                                "status":"success",
                                "type":"re.notifica.import.UserSegment"
                          }
        }


## Import Devices [/import/re.notifica.import.Device]
### Import Devices [POST]
Used to import a list of devices. Every row in the referenced CSV should include at least a `deviceID`, `osVersion`, `appVersion` and `platform`.
The device properties can also be defaulted to whatever you put in the `data` field in the request.
There is one option in this import type, which is `overwrite`, defaults to `false`.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ deviceID (should be a valid APNS, FCM or Safari Website Push token)

+ osVersion

+ appVersion

+ sdkVersion

+ platform (iOS, Android)

+ osString (defaults to platform + osVersion)

+ deviceString (defaults to 'unknown')

+ tags, by default separated by `|`, if you use something else, don't forget to specify it in `tagsSeparator`

+ lastActive (ISO Date, defaults to current date/time)

+ longitude

+ latitude

+ locationLastUpdated (ISO Date, defaults to lastActive)

+ timeZoneOffset

+ userID (If the userID doesn't exist yet, a new user will be created. If omitted, an anonymous user will be generated.)

+ userName (only used when userID is present. Defaults to 'anonymous')


+ Parameters

    + type (required, string, `re.notifica.import.Device`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "overwrite": false,
                        "osVersion": null,
                        "platform": null,
                        "appVersion": null,
                        "includeTags: true,
                        "tagsSeparator": "-"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }



## Import Users [/import/re.notifica.import.User]
### Import Users [POST]
Used to import a list of users. Every row in the referenced CSV should include at least a `userID`. userName is optional and defaults to `anonymous`. This import type has no extra settings.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ userID

+ userName


+ Parameters

    + type (required, string, `re.notifica.import.User`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data": null
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }


## Import Users Into Segment [/import/re.notifica.import.UserSegment]
### Import Users Into Segment [POST]
Used to import a list of users into a segment. Every row in the referenced CSV should contain a `userID`.
The user segment to import into should be set as the `userSegment` property of `data`.
There is one option in this import type, which is `clear`. If set, it clears the segment before importing users, otherwise it just adds users. It defaults to `false`.
Additionally you can also send or schedule a push notification whenever the import is finished. For that make sure you have previously created at least one template and then provide its Id in `notificationTemplate` and `push` as true as properties in the `data` object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ userID


+ Parameters

    + type (required, string, `re.notifica.import.Device`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "push": false,
                        "userSegment": "dfeba0ade92ad65ec8619d4464333",
                        "clear": false,
                        "notificationTemplate": "dfeba0ade92ad65ec8619d4464333",
                        "notificationSchedule: {
                          "time": "YYYY-MM-DD HH:mm"",
                          "timezone": "Europe/Amsterdam",
                          "local": false
                        }
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }


## Import Regions [/import/re.notifica.import.Region]
### Import Regions [POST]
Used to import a list of regions. Regions can have a circular geometry, i.e., latitude/longitude plus a distance, or an advanced Polygon geometry. If only an advanced geometry is given, the import job will calculate an enclosing circle automatically. If no timezone or country are given, these will also be calculated automatically.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ referenceKey

+ name

+ description

+ address

+ tags, separated by `|`

+ category, (`fence`, `poi`, `county`, `city`, `country`). Defaults to `fence`.

+ latitude for circular geometry

+ longitude for circular geometry

+ distance for circular geometry

+ coordinates (pairs of `longitude:latitude`, separated by `|`) for advanced geometry

+ major to be used for beacons in the region

+ timezone, defaults to `UTC`

+ timeZoneOffset, defaults to `0`

+ country


+ Parameters

    + type (required, string, `re.notifica.import.Region`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data": null
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }


## Import Beacons [/import/re.notifica.import.Beacon]
### Import Beacons [POST]
Used to import a list of beacons. If no region with a given major exists, and the `createRegion` property of `data` is set, a new region is created automatically with the same location as the beacon and default values for `category`, `timezone` and `distance`, or `fence`, `UTC` and `100` respectively.
If no region was found or none could be created, the import row is skipped.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ major

+ minor

+ name

+ purpose, (`general`, `pay`, `info`, `staff`, `admin`, `other`). Defaults to `general`.

+ latitude, defaults to region latitude

+ longitude, defaults to region longitude

+ timezone, defaults to `UTC`

+ notification, message  to be set for the beacon


+ Parameters

    + type (required, string, `re.notifica.import.Beacon`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "createRegion": true,
                        "timezone": "Europe/Amsterdam",
                        "distance": "100"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Import Passes [/import/re.notifica.import.Pass]
### Import Passes [POST]
Used to bulk import passes and optionally send them in a push notification. To send a notification, set data property `push` to `true` and set a `message`, `title`, `subtitle` in the data or in the CSV.
Set data property `passbook` to the passbook template Id to use.
Data property `passData` can be used to set default values that will be set if not present in the CSV. Recognized properties in `passData` are
 `description`, `barcode.message`, `barcode.altText`, `location.latitude`, `location.longitude`, `location.altitude`, `location.regionMajor`, `location.regionId`, `location.relevantText`, `beacon.proximityUUID`, `beacon.major`, `beacon.minor`, `beacon.relevantText`.
The property `passFields` inside `passData` can be used to include default values for fields from the Passbook Template.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ userID (to send push notification to)

+ pass_barcode (if barcode is unique, can be used for redeem)

+ pass_barcode_message (not unique, can not be together with pass_barcode)

+ pass_barcode_alt_text

+ pass_barcode_show_alt_text

+ pass_relevant_date

+ pass_expiration_date

+ pass_location_latitude

+ pass_location_longitude

+ pass_location_altitude

+ pass_location_relevant_text

+ pass_location_region_major

+ pass_location_region_id

+ pass_xxx (where xxx is any field defined in the Passbook Template)


+ Parameters

    + type (required, string, `re.notifica.import.Pass`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "passbook": "5245bc5b3e66a3b01fa66355",
                        "push": true,
                        "description": null,
                        "message": "This is your boarding pass",
                        "passData": {
                                "relevantDate": "2018-01-01T12:00:00",
                                "passFields": {
                                        "from": "AMS",
                                        "to": "OPO"
                                }
                        }
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Import Private Messages [/import/re.notifica.import.Notification]
### Import Private Messages [POST]
Used to import a list of private messages to users or devices. Every row in the referenced CSV should contain at least a `userID` or a `deviceID`.
Optionally, a Notification Template can be used to create the notifications. For that make sure you have previously created at least one template and then provide its Id in `notificationTemplate`.
If no template is provided, each row should contain a `message`. Values present in the CSV will overwrite corresponding fields from the template, if provided.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ userID / deviceID (if both are provided, userID is used)

+ title

+ subtitle

+ message

+ attachmentUri (lock screen image, publicly accessible image URL)

+ attachmentMimeType (`image/png`, `image/jpeg`)

+ ttl

+ sound

+ extra (JSON string)

+ notification_xxx (referring to a placeholder in the template)

`title`, `subtitle`, and `message` can contain placeholders in the form of `{{notification_xxxx}}` or any of the default placeholders, e.g. `{{userID}}` or `{{userName}}`.

+ Parameters

    + type (required, string, `re.notifica.import.Notification`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "notificationTemplate": null,
                        "message": "This is my private message"
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }

## Import Grouped Messages [/import/re.notifica.import.GroupedNotification]
### Import Grouped Messages [POST]
Used to import a list of users or devices to send a notification to. Every row in the referenced CSV should contain at least a `userID` or a `deviceID`.
A Notification Template must be used to create the notifications. For that make sure you have previously created at least one template and then provide its Id in `notificationTemplate`.
Values of columns prefixed with `notification_` in the CSV can be used as placeholders in the template
This request is authenticated with the `applicationKey` and  `masterSecret`.

Recognized columns in your .csv file are:

+ userID / deviceID (if both are provided, userID is used)

+ notification_xxx (referring to a placeholder `{{notification_xxx}}` in the template)


+ Parameters

    + type (required, string, `re.notifica.import.GroupedNotification`)...The import type

+ Request (application/json; charset=utf-8)

        {
                "path":"/imports/647431c4dc3798f2a5ae147411a787e8d52447e365d7972ec4d8535/dfeba0ade92ad65ec8619d4464333facc95f5c2feb55df98a92a78",
                "data":{
                        "notificationTemplate": "dfeba0ade92ad65ec8619d4464333",
                        "notificationSchedule: {
                          "time": "YYYY-MM-DD HH:mm"",
                          "timezone": "Europe/Amsterdam",
                          "local": false
                        }
                }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "importJob": {
                        "id": "5245bc5b3e66a3b01f0024d4"
                }
        }



# Group Notification
Methods to create, send and schedule notifications to a specific target audience, user or device.
Combines User, Segments, Tags and the location of the devices to provide you a powerful device selection query for your campaigns.
The 3 most important things to have in consideration when creating a new message is that `message` is always mandatory, the property `type` defines which type of content should be presented to the user and the combination of `message`, `extra`, `sound`, `badge` should be no bigger than 200 bytes.
You can send several types of content in your message. The array `content` should contain one or more objects according to the `type` of message. 
You can also add an array `actions` to your notifications by simply providing one or more objects. 

## Notification Types:
| type | description | 
|:---------:|-------------|
| re.notifica.notification.Alert | The simplest form of notifications, it will display the message in a dialog/alert window. It does not require a content object. You can although add Action objects to it, actions will be added to the window as buttons. |
| re.notifica.notification.WebView | This type allows you to show any piece of HTML in a native WebView. It requires a Content object of type `re.notifica.content.HTML`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.URL | Use this type to open any URL in a native WebView. It requires a Content object of type `re.notifica.content.URL`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Image | Add one or more images to your notifications. It requires one or more Content objects of types `re.notifica.content.JPEG`, `re.notifica.content.PNG` or `re.notifica.content.GIF`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Map | This type of notifications will use the device's native maps to display one or more locations. It requires one or more Content objects of type `re.notifica.content.Marker`. You can additionally add Action objects to this type of Notification. |
| re.notifica.notification.Rate | This type is used exclusively to send a dialog window with three Action objects included. The user can then choose to rate the app in App Store/Google Play, to be remembered later to rate or to not rate at all. This type of Notification does not require any Content object. Also you can not add any more Action objects to this type of Notification. |
| re.notifica.notification.Passbook | Use this type to easily send .pkpass files in your push notifications. Distribute your Passbook Passes directly to your app users. This type does not allow any Action objects. |
| re.notifica.notification.Video | This type of notifications is used to send video content to your users. It requires one of these three types of content: `re.notifica.content.YouTube`, `re.notifica.content.Vimeo` or `re.notifica.content.HTML5Video`. You can additionally add Action objects to this type of Notification. This type is only available for SDKs 1.8.0 and up. |
| re.notifica.notification.URLScheme | Use this type of notifications to deep link messages to areas of your app. You will need to make sure your app responds to these URL Schemes by providing them in you app's Info.plist (iOS) or AndroidManifest.xml (Android). This type is only available for SDKs 1.8.0 and up. |
| re.notifica.notification.None | Use this type if you do not wish to show any UI in Notificare but still make sure we log the open notification event and be able to see these in the dashboard. When using this type you can still handle the notifications yourself so it is possible to still include content, actions or extra parameters. This type is only available for SDKs 1.8.0 and up. |


## Content Objects:
| type | data | 
|:---------:|-------------|
| re.notifica.content.Text | string (eg.: "Hello World!") |
| re.notifica.content.HTML | string (eg.: "\<h1>Hello World!\</h1>") |
| re.notifica.content.URL | string (eg.: "http://notifica.re") |
| re.notifica.content.Image | string (eg.: "https://s3-eu-west-1.amazonaws.com/notificare-storage/notifications/9fd.../6ccd..") |
| re.notifica.content.Marker | object (eg.: {"title":"Some Place", "description":"Some description about that place", "latitude": 4.098765, "longitude": 5.08875}) |
| re.notifica.content.PKPass | string (eg.: "http://notifica.re/path/to/my/pass.pkpass") |
| re.notifica.content.YouTube | string (eg.: "3t_EN-HZVLw") |
| re.notifica.content.Vimeo | string (eg.: "75196023") |
| re.notifica.content.HTML5Video | string (eg.: "https://push.notifica.re/asset/file/3d99d18.../1b029...") |


## Action Objects:
| type | label | target | keyboard | camera | rules |
|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
| re.notifica.action.Callback | string (eg.: "open cam") | string (eg.: "http://api.notifica.re/register?action=xpto&var=xyz") | boolean | boolean | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Telephone | string (eg.: "make a call") | string (eg.: "tel:0500666858") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.SMS | string (eg.: "send sms") | string (eg.: "0500666858") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Mail | string | string (eg.: "me@company.com","you@company.com") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Browser | string (eg.: "open notifica.re") | string (eg.:"http://notifica.re") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.App | string (e.g., "open facebook") | string (eg.: "fb://") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |
| re.notifica.action.Custom | string (eg.: "open tab") | string (eg.: "openTabInMyCode") | n/a | n/a | array (eg.: [{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]) |

## Rules Objects:
| type | params |
|:---------:|-------------|
| re.notifica.rule segment.Add | array of segment Ids (eg.: ["532434df434657df4664","532434df434657df4664"]) |
| re.notifica.rule segment.Remove | array of segment Ids (eg.: ["532434df434657df4664","532434df434657df4664"]) |
| re.notifica.rule tag.Add | array of tags (eg.: ["tag_news","tag_press"]) |
| re.notifica.rule tag.Remove | array of tags (eg.: ["tag_news","tag_press"]) |

## Send to all [/notification/broadcast]

### Send a message to all devices [POST]
Send a message to **all** devices. 
You can also schedule a broadcast, if `scheduled` is true you should immediately use /notification/schedule to create the schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is an iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + rate (optional, number, `100`)...The rate at which we will send notifications in seconds. If provided, we will not send more than x messages per second.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to process soon the notification arrives.



+ Request (application/json)

        {
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "scheduled": true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": []
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Send to one or more tags [/notification/tags]

### Send a message to devices with any of the specified tags [POST]

Send a message to devices with any of the specified `tags`. 
You can also schedule these message, if `scheduled` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of tags. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + rate (optional, number, `100`)...The rate at which we will send notifications in seconds. If provided, we will not send more than x messages per second.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "tags":["test1","test2"],
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "scheduled":false,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [],
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Send to one or more segments [/notification/segments]

### Send a message to users in one or more of the specified segments [POST]
Send a message to users in one or more of the specified `segments`. 
You can also schedule these messages, if `scheduled` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of Segment Ids. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + segments (required, array, `["526f7a71dab9d70711000003","526f7a71dab9d70711000004"]`)...The segments of users to send to.
    + tags (optional, array, `["test"]`)...Only send to devices that have one or more of these tags.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + rate (optional, number, `100`)...The rate at which we will send notifications in seconds. If provided, we will not send more than x messages per second.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "scheduled":true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }

## Send to any device that executed an event [/notification/event]

### Send a message to any device that executed an event [POST]
Send a message to any device that executed an event.
You can also schedule a notification based on events, if `scheduled` is true you should immediately use /notification/schedule to create the schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is an iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + rate (optional, number, `100`)...The rate at which we will send notifications in seconds. If provided, we will not send more than x messages per second.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to process soon the notification arrives.



+ Request (application/json)

        {
               "title":"This is a title",
               "subtitle":"This is a subtitle",
               "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "eventCriteria": {
                      "type": "re.notifica.notification.Open",
                      "startDate": "01-01-2017 01:00",
                      "endDate": "01-02-2017 01:00",
                      "data": {
                                "notification": "3445bc5b4563b01f0f5",
                                "region": null,
                                "fence": null,
                                "serial": null
                      }
                }
                "ttl":3600,
                "sound":"default",
                "scheduled": true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": []
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }



## Send to a custom criteria [/notification/criteria]

### Send a message to devices that match a certain criteria [POST]
Send a message to devices that match a certain criteria.
You can also schedule these messages, if `scheduled` is true you should immediately use /notification/schedule to create a schedule task.
The request accepts an array of Segment Ids. This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + criteria (required, object, `{"segmentsCriteria":[{"quantifier":"any","segments":["5440d30cd636d7450f5c0032","53bbc7836b354d54e29752e3"]}]}`)...The criteria to use.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + rate (optional, number, `100`)...The rate at which we will send notifications in seconds. If provided, we will not send more than x messages per second.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "criteria":{
                    "segmentsCriteria":[{
                        "quantifier":"any",
                        "segments":["5440d30cd636d7450f5c0032","53bbc7836b354d54e29752e3"]
                    }],
                    "tagsCriteria":[{
                        "quantifier":"all",
                        "tags":["test","test2"]
                    }, {
                        "quantifier":"none",
                        "tags":["test3","test4"]
                    }],
                    "propertiesCriteria":[
                        [{
                            "property":"platform",
                            "operator":"in",
                            "value":["iOS","Android"]
                        }, {
                            "property":"sdkVersion",
                            "operator":"gte",
                            "value":"1.8.0"
                        }, {
                            "property":"language",
                            "operator":"in",
                            "value":["nl","en","en-US"]
                        }]
                    ]
                },
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "scheduled":true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Send to a specific User [/notification/user/{user}]

### Send a message to one single user [POST]
Send a message to one single `user`. 
You can also schedule a private message, if `scheduled` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters
    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address.
    + tags (optional, array, `["test"]`)...Only send to devices that have one or more of these tags.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add","params":["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.

+ Request (application/json)

        {
                "type":"re.notifica.notification.Alert",
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "ttl":3600,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ],
                "sound":"default"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        
## Send to a specific device [/notification/device/{device}]

### Send a message to one single device [POST]
Send a message to a `device`. 
You can also schedule this type of messages, if `scheduled` is true you should immediately use /notification/schedule to create a schedule task.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277xxx`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + scheduled (optional, boolean, `true`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "scheduled":true,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": []
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }
        

## Create a triggered message [/notification/triggered]

### Create a triggered message [POST]
Create a message that will not generate any notification. These kind of messages can be used by when creating a `Trigger` or `Beacon`. 
You can not schedule a triggered message.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + tags (optional, array, `["test"]`)...Only send to devices that have one or more of these tags.
    + segments (optional, array, `["526f7a71dab9d70711000003","526f7a71dab9d70711000004"]`)...Only send to devices whose user is in one or more of these segments.
    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + subtitle (optional, string, `Hello World`)...Small text shown in the device's lock screen or notification center. This field should be used as an helper text to the message. Please note that this is only supported by iOS 10 or higher or Android 5 or higher devices.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + push (optional, boolean, `true`)...This property is only available for SDKs 1.8.0 and up. When false it will only create a message in the app's inbox and not generate a remote notification. By default this property will be true. Please note that this property will be ignored if Inbox is not being used.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "title":"This is a title",
                "subtitle":"This is a subtitle",
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "triggered":true,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Send a system message [/notification/system]

### Send a system message [POST]
System notifications are silent messages that will not generate any notification in the device's lock-screen or notification center. This endpoint will send a silent notifications to all your devices. Optionally you can also provide one of the following parameters: criteria, a list of tags, a list of tags and segments, a list of segments or a location. This will allow you to filter the devices you are trying to reach. In iOS, your app must declare **remote-notification** background mode.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + criteria (required, object, `{"segmentsCriteria":[{"quantifier":"any","segments":["5440d30cd636d7450f5c0032","53bbc7836b354d54e29752e3"]}]}`)...The criteria to use.
    + tags (optional, array, `["test"]`)...Only send to devices that have one or more of these tags.
    + segments (optional, array, `["526f7a71dab9d70711000003","526f7a71dab9d70711000004"]`)...Only send to devices whose user is in one or more of these segments.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + type (required, string, `your.domain.system.type`)...Defines a type of for your silent message. Types of notifications are represented by namespaces. Custom notification types should a reverse domain style string: com.domain.*.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "type":"your.domain.system.type",
                "ttl":3600,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }

## Send a system message to a specific user [/notification/system/user/{user}]

### Send a system message to a specific user [POST]
System notifications are silent messages that will not generate any notification in the device's lock-screen or notification center. This endpoint will send a silent notifications to a specific user and its devices. In iOS, your app must declare **remote-notification** background mode.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `your.domain.system.type`)...Defines a type of for your silent message. Types of notifications are represented by namespaces. Custom notification types should a reverse domain style string: com.domain.*.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "type":"your.domain.system.type",
                "ttl":3600,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Send a system message to a specific device [/notification/system/device/{device}]

### Send a system message to a specific device [POST]
System notifications are silent messages that will not generate any notification in the device's lock-screen or notification center. This endpoint will send a silent notifications to a specific device. In iOS, your app must declare **remote-notification** background mode.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `your.domain.system.type`)...Defines a type of for your silent message. Types of notifications are represented by namespaces. Custom notification types should a reverse domain style string: com.domain.*.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.


+ Request (application/json)

        {
                "type":"your.domain.system.type",
                "ttl":3600,
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "_id":"5245bc5b3e66a3b01f0024d4",
                "message":"notifications are queued"
        }


## Notifications [/notification{?limit,skip,scope,scheduled,tag,segment,archived,draft}]

### Get a list of notifications [GET]
Retrieves a list of notifications sent as a broadcast, sent to tags and/or sent to segments.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + limit = `10` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip
    + scope = `application` (optional, string, `application`)...The scope of the messages (it can be one of the following: application, segments, tags)
    + scheduled = `0` (optional, boolean, `1`)...Filter by messages that have been scheduled
    + tag = `tag_news` (optional, string, `tag_news`)...Filter messages by tag (scope must be set to tags)
    + segment = `566acc80cbe343d7136ec9bf` (optional, string, `566acc80cbe343d7136ec9bf`)...Filter messages by segment (scope must be set to segments)
    + archived = `0` (optional, boolean, `1`)...Filter by messages that have been archived
    + draft = `0` (optional, boolean, `1`)...Filter by messages that have have a status of draft


+ Response 200 (application/json; charset=utf-8)

        {
             "notifications":[
                                {
                                    "id": "566acc80cbe343d7136ec9bf",
                                    "application": "5489b42ff23e5815132b492a",
                                    "account": "548985629f634350713ec9ee",
                                    "user_id": null,
                                    "device_id": null,
                                    "ttl": null,
                                    "title":"This is a title",
                                    "subtitle":"This is a subtitle",
                                    "message": "Ready for beers?",
                                    "sound": "default",
                                    "badge": null,
                                    "action_category": null,
                                    "__v": 0,
                                    "actions": [{
                                        "type": "re.notifica.action.Callback",
                                        "label": "yes",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c1",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }, {
                                        "type": "re.notifica.action.Callback",
                                        "label": "no",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c0",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }],
                                    "rules": [],
                                    "attachments": [],
                                    "location": {
                                        "type": "Point",
                                        "coordinates": [4.422683699999993, 51.91263190000001],
                                        "distance": 0.6928425313346089
                                    },
                                    "content": [],
                                    "scheduled": false,
                                    "triggered": false,
                                    "archived": false,
                                    "cleared": false,
                                    "show_in_list": true,
                                    "scope": "application",
                                    "type": "re.notifica.notification.Alert",
                                    "time": "2015-12-11T13:15:44.298Z",
                                    "tags": [],
                                    "segments": [],
                                }
                          ],
                          "count":2
        }

## Notifications (All Types) [/notification/all{?limit,skip,since,archived}]

### Get a list of all notifications [GET]
Retrieves a list of all notifications.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + limit = `10` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip
    + since = `0` (optional, date, `2016-01-01T12:00:00`)...Notifications since a specific date, overrides header
    + If-Modified-Since (optional, date, `2016-01-01T12:00:00`)...Notifications since a specific date, as a HTTP header
    + archived = `0` (optional, boolean, `1`)...Filter by messages that have been archived

+ Response 200 (application/json; charset=utf-8)

        {
             "notifications":[
                                {
                                    "id": "566acc80cbe343d7136ec9bf",
                                    "application": "5489b42ff23e5815132b492a",
                                    "account": "548985629f634350713ec9ee",
                                    "user_id": null,
                                    "device_id": null,
                                    "ttl": null,
                                    "title":"This is a title",
                                    "subtitle":"This is a subtitle",
                                    "message": "Ready for beers?",
                                    "sound": "default",
                                    "badge": null,
                                    "action_category": null,
                                    "__v": 0,
                                    "actions": [{
                                        "type": "re.notifica.action.Callback",
                                        "label": "yes",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c1",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }, {
                                        "type": "re.notifica.action.Callback",
                                        "label": "no",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c0",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }],
                                    "rules": [],
                                    "attachments": [],
                                    "location": {
                                        "type": "Point",
                                        "coordinates": [4.422683699999993, 51.91263190000001],
                                        "distance": 0.6928425313346089
                                    },
                                    "content": [],
                                    "scheduled": false,
                                    "triggered": false,
                                    "archived": false,
                                    "cleared": false,
                                    "show_in_list": true,
                                    "scope": "application",
                                    "type": "re.notifica.notification.Alert",
                                    "time": "2015-12-11T13:15:44.298Z",
                                    "tags": [],
                                    "segments": [],
                                }
                          ],
                          "count":2
        }

## Private Notifications [/notification/user/{userID}{?limit,skip}]

### Get all notifications for a user [GET]
Retrieves the list of notifications sent to a specific user.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + userID (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address.
    + limit = `10` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
             "notifications":[
                                {
                                    "id": "566acc80cbe343d7136ec9bf",
                                    "application": "5489b42ff23e5815132b492a",
                                    "account": "548985629f634350713ec9ee",
                                    "user_id": null,
                                    "device_id": null,
                                    "ttl": null,
                                    "title":"This is a title",
                                    "subtitle":"This is a subtitle",
                                    "message": "Ready for beers?",
                                    "sound": "default",
                                    "badge": null,
                                    "action_category": null,
                                    "__v": 0,
                                    "actions": [{
                                        "type": "re.notifica.action.Callback",
                                        "label": "yes",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c1",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }, {
                                        "type": "re.notifica.action.Callback",
                                        "label": "no",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c0",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }],
                                    "rules": [],
                                    "attachments": [],
                                    "location": {
                                        "type": "Point",
                                        "coordinates": [4.422683699999993, 51.91263190000001],
                                        "distance": 0.6928425313346089
                                    },
                                    "content": [],
                                    "scheduled": false,
                                    "triggered": false,
                                    "archived": false,
                                    "cleared": false,
                                    "show_in_list": true,
                                    "scope": "application",
                                    "type": "re.notifica.notification.Alert",
                                    "time": "2015-12-11T13:15:44.298Z",
                                    "tags": [],
                                    "segments": []
                                }
                          ],
                          "count":2
        }


## Notification Info [/notification/{notification}/info]

### Get information about message performance [GET]
Retrieve information about your message performance.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + notification (required, string, `543d90d0f4e6e1we3ad6576`)...The notification ID given whenever you create or retrieve a notification object.

+ Response 200 (application/json; charset=utf-8)

        {
                "info":{
                             "application": "5354f0bb3fff5452ff4c7c0"
                             "devices": 3
                             "duration": 749
                             "fails": 0
                             "id": "543d90d0f4e6e1we3ad6576"
                             "notification": "543d90d0wew6e10309ad6575"
                             "opened": 0
                             "queued": 3
                             "replied": 0
                             "sent": 3
                             "status": "finished"
                             "users": 0
                        }
        }

## Notification Log [/notification/log{?limit,skip}]

### Get all the errors related to APNS and GCM [GET]
Retrieve information about errors related to APNS and GCM feedback service.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "log":{
                             "application": "5354f0bb3fff5452ff4c7c0",
                             "id": "543d90d0f4e6e1we3ad6576",
                             "message": "Invalid token size"
                             "notification": "56d421uu073cc157eu3137",
                             "transport": "APNS",
                             "device_id": "d31b6529"
                             "date": "2016-02-29T10:46:00.111Z"
                        }
        }

### Delete the list of errors [DELETE]
Clear the list of errors related to APNS and GCM feedback service.
This request must be authenticated with the `applicationKey` and `masterSecret`.


+ Response 200 (application/json; charset=utf-8)

        {
                "message": "log cleared"
        }


# Group Notification Schedule
Methods to create, list, modify or cancel notification schedules. Schedules can be set according to a specific time (in UTC) or according to the local timezone on the device.
In the first case, the schedule will only run once, in the latter case, the schedule will run until all timezones have passed the time in the schedule.
A schedule can have a status of `scheduled`, `running`, `finished` or `canceled`. Only `scheduled` schedules can be modified.
These methods operate on existing notifications, so create a notification first with the `scheduled` property set.
Use its `_id` property to refer to it in any of these methods.

## New Scheduled Notification [/notification/schedule]

### Create a schedule for a previously created message [POST]
Start a scheduled task for a previously created message.
The property `local` determines if message should be sent on the device's local time or UTC.
If `local` is true make sure the `time` is at least 14 hours from now to make sure the message will arrive in all timezones.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The notification Id of the notification to be schedule.
    + time (required, string, `2014-12-25 10:00`)...The date and time (YYYY-MM-DD hh:mm) in which the notification should be sent.
    + local (required, `boolean`)...Defines if message should be sent on date and time of the device. If false time will be considered UTC.

+ Request (application/json)

        {
                "notification":"5245bc5b3e66a3b01f0024d4",
                "time":"2014-12-25 10:00",
                "local":true
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "schedule":{
                             "_id":"5245bc5b3e66a3b01f0024d4"
                           }
        }


## Scheduled Notifications [/notification/schedule{?skip,limit}]

### Get a list of schedules [GET]
Returns a list of all schedules for your app
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "schedules": [
                        {
                                "_id": "56d421uu073cc157eu3137",
                                "nextRun": "2016-08-26T23:15:04.958Z",
                                "application": "5489b42ff23e5815132b492a",
                                "notification": "56d421uu073cc157eu3137",
                                "time": "2016-08-26 23:01",
                                "status": "running",
                                "lastRun": "2016-08-26T23:00:10.273Z",
                                "local": true
                        }
                ],
                "count": 1
        }


## Schedules [/notification/schedule/fornotification/{notification}{?skip,limit}]

### Get a list of schedules for a notification [GET]

Returns a list of all schedules for a specific notification
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + notification (required, string, `56d421uu073cc157eu3137`)...The notification Id
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "schedules": [
                        {
                                "_id": "56d421uu073cc157eu3137",
                                "nextRun": "2016-08-26T23:15:04.958Z",
                                "application": "5489b42ff23e5815132b492a",
                                "notification": "56d421uu073cc157eu3137",
                                "time": "2016-08-26 23:01",
                                "status": "running",
                                "lastRun": "2016-08-26T23:00:10.273Z",
                                "local": true
                        }
                ],
                "count": 1
        }



## Schedule [/notification/schedule/{schedule}]

### Retrieve a notification schedule [GET]
Returns a schedule object.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + schedule (required, string, `56d421uu073cc157eu3137`)...The schedule Id
    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "schedule": {
                                "_id": "56d421uu073cc157eu3137",
                                "nextRun": "2016-08-26T23:15:04.958Z",
                                "application": "5489b42ff23e5815132b492a",
                                "notification": "56d421uu073cc157eu3137",
                                "time": "2016-08-26 23:01",
                                "status": "running",
                                "lastRun": "2016-08-26T23:00:10.273Z",
                                "local": true
                },
                "count": 1
        }

### Modify a notification schedule [PUT]
Modifies a notification schedule. Can only be applied to a schedule that is currently `scheduled`. Attempts to modify a currently `running`, `finished` or `canceled` schedule result in a `400`.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + schedule (required, string, `56d421uu073cc157eu3137`)...The schedule Id of the schedule to be canceled.
    + time (optional, string, `2014-12-25 10:00`)...The date and time (YYYY-MM-DD hh:mm) in which the notification should be sent.
    + local (optional, `boolean`)...Defines if message should be sent on date and time of the device. If false time will be considered UTC.


+ Request (application/json; charset=utf-8)

        {
                "time": "2016-08-25 10:00",
                "local": false
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "schedule updated"
        }

### Cancel a notification schedule [DELETE]
Cancels a currently `scheduled` or `running` schedule.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + schedule (required, string, `56d421uu073cc157eu3137`)...The schedule Id of the schedule to be canceled.

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "schedule canceled"
        }




# Group Notification Template
Methods for retrieving, creating and edit notification templates

## Templates [/notification/template{?limit,skip,message}]

### List all templates for this app [GET]
List all templates for this app

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip
    + message = `My great message` (optional, string, `My great message`)...The string to search for in title, subtitle and message

+ Response 200 (application/json; charset=utf-8)

        {
             "templates":[
                                {
                                    "id": "566acc80cbe343d7136ec9bf",
                                    "application": "5489b42ff23e5815132b492a",
                                    "account": "548985629f634350713ec9ee",
                                    "ttl": null,
                                    "message": "Ready for beers?",
                                    "sound": "default",
                                    "badge": null,
                                    "action_category": null,
                                    "__v": 0,
                                    "actions": [{
                                        "type": "re.notifica.action.Callback",
                                        "label": "yes",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c1",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }, {
                                        "type": "re.notifica.action.Callback",
                                        "label": "no",
                                        "target": "",
                                        "id": "566acc80cbe343d7136ec9c0",
                                        "rules": [],
                                        "camera": false,
                                        "keyboard": false
                                    }],
                                    "rules": [],
                                    "attachments": [],
                                    "content": [],
                                    "type": "re.notifica.notification.Alert",
                                    "time": "2015-12-11T13:15:44.298Z"
                                }
                          ],
                          "count":2
        }

## New Template [/notification/template]

### Create a template [POST]
Create a template object.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (required, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + title (required, string, `My Title`)...With SDK 1.9 and up, iOS 10 and up and Android 5 and up messages support a title which will be shown in the lock-screen or notification center.
    + subtitle (required, string, `My Subtitle`)...With SDK 1.9 and up, iOS 10 and up and Android 5 and up messages support a title which will be shown in the lock-screen or notification center.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + push (optional, boolean, `false`)...Specify if this message should generate a remote notification. By default teh value of this property is true.
    + ttl (optional, number, `3600`)...Number of seconds the message will be attempted to be delivered by APNS or GCM.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + actionCategory (optional, string, `My Template`)...Use a previously created Rich Push template for your message. Use the name of the template for this property and the actions in that template as the actions for this notification. This will enable actionable notifications from the notification center in both iOS and Android.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + languages (optional, array, `['en-US','en-GB']`)...The list of localized content language identifiers used in localizedContent. When included, you must also provide a list of localizedContent objects in the same order.
    + localizedContent (optional, array, `[{"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}, {"title":"My Title", "subtitle":"My Subtitle", "content":[], "actions":[], "attachments":[]}]`)...Provides content for all the language identifiers provided in languages.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.
    + rate (optional, number, `20`)...Number of messages per second that should be sent using this template.


+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "triggered":true,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.HTML",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "template": {
                                "_id":"5245bc5b3e66a3b01f0024d4"
                            }
        }


## Template [/notification/template/{template}]

### Retrieve a template object [GET]
Retrieve a template object.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + template (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the template

+ Response 200 (application/json; charset=utf-8)

        {
                "template": {
                                "id": "566acc80cbe343d7136ec9bf",
                                "application": "5489b42ff23e5815132b492a",
                                "account": "548985629f634350713ec9ee",
                                "ttl": null,
                                "message": "Ready for beers?",
                                "sound": "default",
                                "badge": null,
                                "action_category": null,
                                "__v": 0,
                                "actions": [{
                                    "type": "re.notifica.action.Callback",
                                    "label": "yes",
                                    "target": "",
                                    "id": "566acc80cbe343d7136ec9c1",
                                    "rules": [],
                                    "camera": false,
                                    "keyboard": false
                                }, {
                                    "type": "re.notifica.action.Callback",
                                    "label": "no",
                                    "target": "",
                                    "id": "566acc80cbe343d7136ec9c0",
                                    "rules": [],
                                    "camera": false,
                                    "keyboard": false
                                }],
                                "rules": [],
                                "attachments": [],
                                "content": [],
                                "type": "re.notifica.notification.Alert",
                                "time": "2015-12-11T13:15:44.298Z"
                            }
        }



## Edit Template [PUT]
Edit a template object
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + template (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the template

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "triggered":true,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.HTML",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in",
                                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away",
                                "rules": [{"type":"re.notifica.rule.segment.Remove", "params":["3445bc5b4563b01f0f5"]}]
                        }
                ]
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "template updated"
        }


## Delete a template [DELETE]
Destroy a template. This operation can not be undone.
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + template (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the template


+ Response 200 (application/json; charset=utf-8)

        {
                "message": "template deleted"
        }




# Group Notification Test
Methods to test audience selection. Retrieves current devices based on the specified selection. It does not send any notification.
Combines User, Segments, Tags and the location of the devices the same way Notification does.

## Test a message to all [/notification/test/broadcast]

### Test a message to all devices [POST]
Test a message to **all** devices. This call must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + type (optional, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.



+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to one or more tags [/notification/test/tags]

### Test a message to devices with any of the specified tags [POST]
Test a message to devices with any of the specified `tags`. The call accepts an array of tags. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + tags (required, array, `["test"]`)...Only send to devices that have one or more of these tags.
    + type (optional, string, `re.notifica.notification.Alert`)...Defines the type of content to show. Types of notifications are represented by namespaces. Notification types should be match the following namespace: re.notifica.notification.*. Please refer to Notification Types for all available types.
    + message (required, string, `Hello World`)...Short and concise message. This is the first thing your user sees, make sure it is relevant and that somehow summarizes what you intend to say.
    + content (optional, array, `[{"type":"re.notifica.content.HTML",data:"<h1>Hello</h1>"}]`)...An array of Content objects according to the type of Notification. Please refer to Content types for all available types.
    + attachments (optional, object, `[{"uri":"https://domain.com/image","mimeType":"image/jpg"}]`)...An object containing the URL to an image either uploaded into our platform or hosted in any public web server.
    + location (optional, object, `{"latitude":2.3455,"longitude":4.5667, distance: 10}`)...An object representing the geo-target. Where distance is represented in kilometers. When location is provided only devices in that location will receive the notification.
    + actions (optional, array, `[{"type":"re.notifica.action.Callback", "label":"Yes", "target": null, "keyboard": false, "camera": false, rules": [{"type":"re.notifica.rule.segment.Add", params: ["532434df434657df4664"]}]}]`)...Adds one or more interactions to a notification. An array of Action objects. Please refer to Action objects for all types available.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add",params:["532434df434657df4664"]}]`)...Adds one or more rules to a notification. An array of rules objects. Please refer to Rules objects for all types available.
    + sound (optional, string, `default`)...Name of sound to play. `default` means use the default sound as set by the user, any other string will be looked up as sound file on the device (`mp3` on Android, `aiff` on iOS).
    + lights (optional, object, `{"color":"","on":"","off":""}`)...An object containing a color string ("white", "red", "#rrggbb", "#aarrggbb") and the on/off time in milliseconds. Colors are only applicable to Android and will be displayed by hardware as accurately as possible.
    + badge (optional, number, `2`)...This is a iOS only property. A badge will be displayed over your app icon whenever a notification arrives. Use a number from 1 to 9999.
    + schedule (optional, `boolean`)...When true will prevent the message from being sent. Additionaly you will have to create a schedule task by calling the /notification/schedule.
    + extra (optional, object, `{"mykey":"myvalue"}`)...A valid one-level JSON object. This is useful if you need to send extra data that you will need to proccess soon the notification arrives.



+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to one or more segments [/notification/test/segments]

### Test a message to users in one or more of the specified tags [POST]
Send a message to users in one or more of the specified `segments`. The request accepts an array of IDs segments. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message for a specific user [/notification/test/user/{user}]

### Test a message to a user [POST]
Test a message to a `user`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## Test a message to a specific device [/notification/test/device/{device}]

### Test a message to a device [POST]
Test a message to a `device`. 
This request must be authenticated with the `applicationKey` and `masterSecret`.

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277xxx`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }


# Group Pass
Methods to manage your passes. Before creating passes you must create passbook templates. To create, edit and delete templates see the [Passbook](http://docs.notificare.apiary.io/#passbook) endpoints.


## Passes [/pass{?limit,skip}]

### Get all passes for an application [GET]
Get all passes for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
             "passes":[
                             {
                               "_id":"5501894253058ca5269a9928",
                               "application":"5354f0bb3fa544452ff4c7c0",
                               "passbook":"54e135049c2cad772e7c0de0",
                               "barcode":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                               "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                               "data":{
                                        "backgroundColor":"rgb(0,0,0)",
                                        "foregroundColor":"rgb(255,255,255)",
                                        "suppressStripShine":false,
                                        "labelColor":"rgb(255,255,255)",
                                        "logoText":"My Company",
                                        "description":"coupon example",
                                        "auxiliaryFields":[],
                                        "headerFields":[],
                                        "primaryFields":[
                                                          {
                                                             "string":true,
                                                             "key":"discount",
                                                             "label":"discount",
                                                             "textAlignment": "PKTextAlignmentLeft",
                                                             "value": "20% off"
                                                           }
                                                          ],
                                        "secondaryFields":[
                                                            {
                                                              "string":true,
                                                              "key":"expires",
                                                              "label":"expires",
                                                              "textAlignment":"PKTextAlignmentLeft",
                                                              "value":"31-12-2015"
                                                            }
                                                          ],
                                        "backFields":[],
                                        "transitType":null,
                                        "barcode":{
                                                     "format":"PKBarcodeFormatQR",
                                                     "messageEncoding":"iso-8859-1"
                                                  },
                                        "background":null,
                                        "thumbnail":null,
                                        "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                                        "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                                        "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                                        "footer":null

                               }
                             }
                          ],
                          "count":2
        }




## New Pass [/pass]

### Create a new pass [POST]
Create a new pass. You should first create a pass template to help you bootstrap a new pass. Please read the [Pass Template](http://docs.notificare.apiary.io/#reference/pass-templates) endpoints to learn how to create pass templates. Passes will require images, see also the [Uploads](http://docs.notificare.apiary.io/#reference/upload) endpoints to learn how to upload a file.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook = `54e135049c2cad772e7c0de0` (required, string, `54e135049c2cad772e7c0de0`)...The passbook template used to create a pass.
    + barcode = `1234567890` (optional, string, `1234567890`)...A custom string to be used as the pass barcode. We will generate one for you if this property is not present.
    + redeem = `always` (required, string, `always`)...A pass supports one of 3 modes (always, once, limit) for redemption.
    + limit = `10` (optional, number, `10`)...When using `limit` as a redeem option, you should provide the number of times the card can be redeemed.
    + data = `{backgroundColor":"rgb(0,0,0)"}` (required, object, `{backgroundColor":"rgb(0,0,0)"....}`)...The data object from a passbook template, where the fields (headerFields, primaryFields, secondaryFields, auxiliaryFields, backFields) should contain a value property.
    + active = `true` (optional, boolean, `true`)...A property flagging if the pass is active or not.


+ Request (application/json)

        {
                 "passbook":"54e135049c2cad772e7c0de0",
                 "barcode":"1234567890",
                 "redeem":"always",
                 "active":true,
                 "data":{
                           "backgroundColor":"rgb(0,0,0)",
                           "foregroundColor":"rgb(255,255,255)",
                           "suppressStripShine":false,
                           "labelColor":"rgb(255,255,255)",
                           "logoText":"lebkov",
                           "description":"coupon example",
                           "auxiliaryFields":[],
                           "headerFields":[],
                           "primaryFields":[
                                             {
                                                "string":true,
                                                "key":"discount",
                                                "label":"discount",
                                                "textAlignment": "PKTextAlignmentLeft",
                                                "value": "20% off"
                                             }
                                           ],
                           "secondaryFields":[
                                               {
                                                  "string":true,
                                                  "key":"expires",
                                                  "label":"expires",
                                                  "textAlignment":"PKTextAlignmentLeft",
                                                  "value": "31-12-2015"
                                               }
                                             ],
                           "backFields":[],
                           "transitType":null,
                           "barcode":{
                                       "format":"PKBarcodeFormatQR",
                                       "messageEncoding":"iso-8859-1"
                                     },
                           "background":null,
                           "thumbnail":null,
                           "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                           "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                           "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                           "footer":null
                 }
            }


+ Response 201 (application/json; charset=utf-8)

        {
                "pass":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Pass [/pass/{pass}]

### Get a pass object [GET]
Get a pass object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of pass.


+ Response 200 (application/json; charset=utf-8)

        {
                 "_id":"5501894253058ca5269a9928",
                 "application":"5354f0bb3fa544452ff4c7c0",
                 "passbook":"54e135049c2cad772e7c0de0",
                 "barcode":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                 "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                 "data":{
                           "backgroundColor":"rgb(0,0,0)",
                           "foregroundColor":"rgb(255,255,255)",
                           "suppressStripShine":false,
                           "labelColor":"rgb(255,255,255)",
                           "logoText":"lebkov",
                           "description":"coupon example",
                           "auxiliaryFields":[],
                           "headerFields":[],
                           "primaryFields":[
                                             {
                                                "string":true,
                                                "key":"discount",
                                                "label":"discount",
                                                "textAlignment": "PKTextAlignmentLeft",
                                                "value": "20% off"
                                             }
                                           ],
                           "secondaryFields":[
                                               {
                                                  "string":true,
                                                  "key":"expires",
                                                  "label":"expires",
                                                  "textAlignment":"PKTextAlignmentLeft",
                                                  "value": "31-12-2015"
                                               }
                                             ],
                           "backFields":[],
                           "transitType":null,
                           "barcode":{
                                       "format":"PKBarcodeFormatQR",
                                       "messageEncoding":"iso-8859-1"
                                     },
                           "background":null,
                           "thumbnail":null,
                           "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                           "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                           "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                           "footer":null
                 }
            }

### Modify a pass [PUT]
Modify a pass.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active pass.
    + passbook = `54e135049c2cad772e7c0de0` (required, string, `54e135049c2cad772e7c0de0`)...The passbook template used to create a pass.
    + barcode = `1234567890` (optional, string, `1234567890`)...A custom string to be used as the pass barcode. We will generate one for you if this property is not present.
    + redeem = `always` (required, string, `always`)...A pass supports one of 3 modes (always, once, limit) for redemption.
    + limit = `10` (optional, number, `10`)...When using `limit` as a redeem option, you should provide the number of times the card can be redeemed.
    + data = `{backgroundColor":"rgb(0,0,0)"}` (required, object, `{backgroundColor":"rgb(0,0,0)"....}`)...The data object from a passbook template, where the fields (headerFields, primaryFields, secondaryFields, auxiliaryFields, backFields) should contain a value property.
    + active = `true` (optional, boolean, `true`)...A property flagging if the pass is active or not.

+ Request (application/json)

        {
                 "passbook":"54e135049c2cad772e7c0de0",
                 "barcode":"1234567890",
                 "redeem":"always",
                 "active":true,
                 "data":{
                           "backgroundColor":"rgb(0,0,0)",
                           "foregroundColor":"rgb(255,255,255)",
                           "suppressStripShine":false,
                           "labelColor":"rgb(255,255,255)",
                           "logoText":"lebkov",
                           "description":"coupon example",
                           "auxiliaryFields":[],
                           "headerFields":[],
                           "primaryFields":[
                                             {
                                                "string":true,
                                                "key":"discount",
                                                "label":"discount",
                                                "textAlignment": "PKTextAlignmentLeft",
                                                "value": "20% off"
                                             }
                                           ],
                           "secondaryFields":[
                                               {
                                                  "string":true,
                                                  "key":"expires",
                                                  "label":"expires",
                                                  "textAlignment":"PKTextAlignmentLeft",
                                                  "value": "31-12-2015"
                                               }
                                             ],
                           "backFields":[],
                           "transitType":null,
                           "barcode":{
                                       "format":"PKBarcodeFormatQR",
                                       "messageEncoding":"iso-8859-1"
                                     },
                           "background":null,
                           "thumbnail":null,
                           "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                           "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                           "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                           "footer":null
                 }
            }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass updated"
        }




### Delete a pass [DELETE]
Delete a pass. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active pass.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass deleted"
        }


# Pass for Serial [/pass/forserial/{serial}]

### Get a pass object using the serial string [GET]
Get a pass object using the serial string.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of pass.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passbook":"54e135049c2cad772e7c0de0",
                     "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment": "PKTextAlignmentLeft",
                                                    "value": "20% off"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft",
                                                      "value": "31-12-2015"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     }
                }

# Pass for Barcode [/pass/forbarcode/{barcode}]

### Get a pass object using the barcode string [GET]
Get a pass object using the barcode string.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + pass (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of pass.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passbook":"54e135049c2cad772e7c0de0",
                     "serial":"402ab90b-65b5-4b4f-91fa-9823b2972f85",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment": "PKTextAlignmentLeft",
                                                    "value": "20% off"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft",
                                                      "value": "31-12-2015"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     }
                }


## Redeem Pass [/pass/redeem/{barcode}]

### Redeem a pass [PUT]
Redeem a pass using a barcode string.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + barcode (required, string, `402ab90b-65b5-4b4f-91fa-9823b2972f85`)...The barcode string of an active pass.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"pass redeemed"
        }


## Download Pass [/pass/pkpass/{serial}]

### Download Pass [GET]
Download a pass using a serial UUID.
This request does not require authentication.

+ Parameters

    + serial (required, string, `402ab90b-65b5-4b4f-91fa-9823b2972f85`)...The serial number of an active pass.

## Generate Barcode For Serial [/pass/barcode/forserial/{serial}]

### Generate Barcode [GET]
Generate a barcode for a specific pass using the serial UUID.
This request does not require authentication.

+ Parameters

    + serial (required, string, `402ab90b-65b5-4b4f-91fa-9823b2972f85`)...The serial number of an active pass.

+ Response 200 (image/png)

## Generate a Barcode [/pass/barcode/{type}/{code}]

### Generate Barcode [GET]
Generate a barcode for a specific type and code.
This request does not require authentication.

### Types:

***
pdf417
***
qr
***
aztec
***
code128
***

+ Parameters

    + type (required, string, `qr`)...The barcode type.
    + code (required, string, `xxx-yyy-zzzz-123456`)...The code to generate a barcode for.

+ Response 200 (image/png)


# Group Pass Templates
Methods to manage your passbook templates. These templates should be created before you can start creating passes.
They will help you pre-define the template styles your application needs and accelerate pass creation. To create and redeem passes see also the [Pass](http://docs.notificare.apiary.io/#reference/pass) endpoints. Pass templates will require images, see also the [Uploads](http://docs.notificare.apiary.io/#reference/upload) endpoints to learn how to upload a file.


## Pass Templates [/passbook{?limit,skip}]

### Get all pass templates for an application [GET]
Get all pass templates for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
             "passbooks":[
                             {
                               "_id":"5501894253058ca5269a9928",
                               "application":"5354f0bb3fa544452ff4c7c0",
                               "passStyle":"coupon",
                               "data":{
                                        "backgroundColor":"rgb(0,0,0)",
                                        "foregroundColor":"rgb(255,255,255)",
                                        "suppressStripShine":false,
                                        "labelColor":"rgb(255,255,255)",
                                        "logoText":"lebkov",
                                        "description":"coupon example",
                                        "auxiliaryFields":[],
                                        "headerFields":[],
                                        "primaryFields":[
                                                          {
                                                             "string":true,
                                                             "key":"discount",
                                                             "label":"discount",
                                                             "textAlignment":
                                                             "PKTextAlignmentLeft"
                                                           }
                                                          ],
                                        "secondaryFields":[
                                                            {
                                                              "string":true,
                                                              "key":"expires",
                                                              "label":"expires",
                                                              "textAlignment":"PKTextAlignmentLeft"
                                                            }
                                                          ],
                                        "backFields":[],
                                        "transitType":null,
                                        "barcode":{
                                                     "format":"PKBarcodeFormatQR",
                                                     "messageEncoding":"iso-8859-1"
                                                  },
                                        "background":null,
                                        "thumbnail":null,
                                        "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                                        "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                                        "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                                        "footer":null

                               },
                               "name":"coupon example",
                               "__v":0,
                               "active":false
                             }
                          ],
                          "count":2
        }




## New Pass Template [/passbook]

### Create a new pass template [POST]
Create a new pass template.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Fields can not have a `key` that is a reserved property. Reserved keys are:

+ `relevant_date`
+ `expiration_date`
+ `voided`
+ `barcode_message`
+ `barcode_alt_text`
+ `barcode_show_alt_text`
+ `barcode_format`
+ `barcode_message_encoding`
+ `description`
+ `beacon_proximity_uuid`
+ `beacon_major`
+ `beacon_minor`
+ `beacon_relevant_text`
+ `location_latitude`
+ `location_longitude`
+ `location_altitude`
+ `location_relevant_text`
+ `location_region_id`
+ `location_region_major`
+ `message`
+ `title`
+ `subtitle`
+ `user_info`
+ `app_launch_url`
+ `associated_store_identifiers`
+ `max_distance`
+ `background_color`
+ `foreground_color`
+ `grouping_identifier`
+ `label_color`
+ `logo_text`
+ `suppress_strip_shine`
+ `nfc_message`
+ `nfc_encryption_public_key`
+ `transit_type`
+ `redeem_type`
+ `redeem_limit`


+ Parameters

    + passStyle = `coupon` (required, string, `coupon`)...A pass template can have several styles. A style will define how your pass looks and behaves. This string will indicate what style to use (boarding, coupon, ticket, card, generic).
    + data = `{backgroundColor":"rgb(0,0,0)"}` (required, object, `{backgroundColor":"rgb(0,0,0)"....}`)...The data object containing all the information, colours and fields for a pass.


+ Request (application/json)

        {
             "passStyle":"coupon",
             "data":{
                       "backgroundColor":"rgb(0,0,0)",
                       "foregroundColor":"rgb(255,255,255)",
                       "suppressStripShine":false,
                       "labelColor":"rgb(255,255,255)",
                       "logoText":"lebkov",
                       "description":"coupon example",
                       "auxiliaryFields":[],
                       "headerFields":[],
                       "primaryFields":[
                                         {
                                            "string":true,
                                            "key":"discount",
                                            "label":"discount",
                                            "textAlignment":
                                            "PKTextAlignmentLeft"
                                         }
                                       ],
                       "secondaryFields":[
                                           {
                                              "string":true,
                                              "key":"expires",
                                              "label":"expires",
                                              "textAlignment":"PKTextAlignmentLeft"
                                           }
                                         ],
                       "backFields":[],
                       "transitType":null,
                       "barcode":{
                                   "format":"PKBarcodeFormatQR",
                                   "messageEncoding":"iso-8859-1"
                                 },
                       "background":null,
                       "thumbnail":null,
                       "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                       "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                       "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                       "footer":null
             },
             "name":"coupon example"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "passbook":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Pass Template [/passbook/{passbook}]

### Get a pass template object [GET]
Get a pass template object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.


+ Response 200 (application/json; charset=utf-8)

        {
                     "_id":"5501894253058ca5269a9928",
                     "application":"5354f0bb3fa544452ff4c7c0",
                     "passStyle":"coupon",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment":
                                                    "PKTextAlignmentLeft"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     },
                     "name":"coupon example"
        }


### Modify a pass template [PUT]
Modify a pass template.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.
    + passStyle = `coupon` (required, string, `coupon`)...A pass template can have several styles. A style will define how your pass looks and behaves. This string will indicate what style to use (boarding, coupon, ticket, card, generic).
    + data = `{backgroundColor":"rgb(0,0,0)"}` (required, object, `{backgroundColor":"rgb(0,0,0)"....}`)...The data object containing all the information, colours and fields for a pass.

+ Request (application/json)

        {
                     "passStyle":"coupon",
                     "data":{
                               "backgroundColor":"rgb(0,0,0)",
                               "foregroundColor":"rgb(255,255,255)",
                               "suppressStripShine":false,
                               "labelColor":"rgb(255,255,255)",
                               "logoText":"lebkov",
                               "description":"coupon example",
                               "auxiliaryFields":[],
                               "headerFields":[],
                               "primaryFields":[
                                                 {
                                                    "string":true,
                                                    "key":"discount",
                                                    "label":"discount",
                                                    "textAlignment":
                                                    "PKTextAlignmentLeft"
                                                 }
                                               ],
                               "secondaryFields":[
                                                   {
                                                      "string":true,
                                                      "key":"expires",
                                                      "label":"expires",
                                                      "textAlignment":"PKTextAlignmentLeft"
                                                   }
                                                 ],
                               "backFields":[],
                               "transitType":null,
                               "barcode":{
                                           "format":"PKBarcodeFormatQR",
                                           "messageEncoding":"iso-8859-1"
                                         },
                               "background":null,
                               "thumbnail":null,
                               "logo":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/7e6166684680598ff63894fbc837db244a1d98ea02793b414845a23f876f31ef",
                               "icon":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/aa2a7d561c6ba9f99f169a38a92dc0ac98d5f5a6cec0b4bea447e62e70e0ea96",
                               "strip":"https://push.notifica.re/upload/passbook/3d99d18148e6f3dbcf4ff891c9a026463b0311feccc7b9d0c8c79fee9b4dde19/827a04cf2e5f8653f544432a72fc217409c57af0f0068fd0696f374e183e6b14",
                               "footer":null
                     },
                     "name":"coupon example"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"passbook updated"
        }


### Delete a pass template [DELETE]
Delete a pass template. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + passbook (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active passbook template.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"passbook deleted"
        }


# Group Product
Methods to manage your virtual products. Products can be purchased inside your application through both the App Store and Google Play.


## Products [/product{?limit,skip}]

### Get all products for an application [GET]
Get all products for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
            "products":[
                           {
                              "_id":"542f479660a365ad5a47a794",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.nonconsumable",
                              "type":"onetime",
                              "name":"Non-Consumable",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           },
                           {
                              "_id":"5442c0927f8ec974633ed40c",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.prod2",
                              "type":"onetime",
                              "name":"Prod2",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           },
                           {
                              "_id":"544788ed9a6050cd6f008b8d",
                              "application":"5354f0bb3fa544452ff4c7c0",
                              "identifier":"re.notifica.office.consumable",
                              "type":"consumable",
                              "name":"Consumable",
                              "stores":["AppStore","GooglePlay"],
                              "active":true
                           }
                       ],
            "count":3
        }




## New Product [/product]

### Create a new product [POST]
Create a new product.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
             "identifier":"re.notifica.office.consumable",
             "type":"consumable",
             "name":"Consumable",
             "stores":["AppStore","GooglePlay"],
             "active":true

        }


+ Response 201 (application/json; charset=utf-8)

        {
                "product":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Product [/product/{product}]

### Get a product object [GET]
Get a product object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                                      "_id":"544788ed9a6050cd6f008b8d",
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "identifier":"re.notifica.office.consumable",
                                      "type":"consumable",
                                      "name":"Consumable",
                                      "stores":["AppStore","GooglePlay"],
                                      "active":true
                                   }


### Modify a product [PUT]
Modify a product.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.

+ Request (application/json)

        {
                     "identifier":"re.notifica.office.consumable",
                     "type":"consumable",
                     "name":"Consumable",
                     "stores":["AppStore","GooglePlay"],
                     "active":true

                }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"product updated"
        }


### Delete a product [DELETE]
Delete a product. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + product (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"product deleted"
        }


## Product by SKU [/product/foridentifier/{sku}]

### Get a product object using the SKU [GET]
Get a product object using SKU.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + sku (required, string, `re.notifica.office.consumable`)...The SKU (identifier) of an active product.


+ Response 200 (application/json; charset=utf-8)

        {
                                      "_id":"544788ed9a6050cd6f008b8d",
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "identifier":"re.notifica.office.consumable",
                                      "type":"consumable",
                                      "name":"Consumable",
                                      "stores":["AppStore","GooglePlay"],
                                      "active":true
                                   }


# Group Purchase

## Purchases [/purchase{?limit,skip}]

### Get all purchases for an application [GET]
Get all purchases for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                    "products":[
                                   {
                                      "_id":"5477c86387c552350c886d2f",
                                      "data":{
                                                "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                "purchase_date_ms":"1417136222704",
                                                "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                "original_transaction_id":"1000000133399653",
                                                "bvrs":"1.0.36",
                                                "transaction_id":"1000000133399653",
                                                "quantity":"1",
                                                "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                "item_id":"944702328",
                                                "product_id":"re.notifica.office.consumable",
                                                "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                "bid":"re.notifica.office",
                                                "original_purchase_date_ms":"1417136222704"
                                             },
                                      "date":"2014-11-28T00:57:02.704Z",
                                      "identifier":"re.notifica.office.consumable",
                                      "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                      "userID":"joel@notifica.re",
                                      "price":0.89,
                                      "application":"5354f0bb3fa544452ff4c7c0",
                                      "transactionIdentifier":"1000000133399653",
                                      "currency":"EUR"
                                   }
                               ],
                               "count":1
                }


## Purchase [/purchase/{purchase}]

### Get a specific purchase [GET]
Get a specific purchase.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + purchase (required, string, `5245bc5b3e66a3b01f0024d4`)...The id of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }

## Purchase by Transaction [/purchase/bytransaction/{transaction}]

### Get a specific purchase using the transaction [GET]
Get a specific purchase using the transaction.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + transaction (required, string, `1000000133399653`)...The transaction id of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }


## Purchase by SKU [/purchase/byidentifier/{identifier}]

### Get a specific purchase using the SKU [GET]
Get a specific purchase using the SKU.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + identifier (required, string, `re.notifica.office.consumable`)...The SKU (identifier) of a purchase.

+ Response 200 (application/json; charset=utf-8)

        {
                                              "_id":"5477c86387c552350c886d2f",
                                              "data":{
                                                        "original_purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "purchase_date_ms":"1417136222704",
                                                        "unique_identifier":"d30aeae69ba81cd6077a062f721059b8f1c1ffe8",
                                                        "original_transaction_id":"1000000133399653",
                                                        "bvrs":"1.0.36",
                                                        "transaction_id":"1000000133399653",
                                                        "quantity":"1",
                                                        "unique_vendor_identifier":"7F64F64E-8DAF-4445-93A2-B4632DDBAED3",
                                                        "item_id":"944702328",
                                                        "product_id":"re.notifica.office.consumable",
                                                        "purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "original_purchase_date":"2014-11-28 00:57:02 Etc/GMT",
                                                        "purchase_date_pst":"2014-11-27 16:57:02 America/Los_Angeles",
                                                        "bid":"re.notifica.office",
                                                        "original_purchase_date_ms":"1417136222704"
                                                     },
                                              "date":"2014-11-28T00:57:02.704Z",
                                              "identifier":"re.notifica.office.consumable",
                                              "deviceID":"1ebffb005c83b016e5dffafbf2755fabb79e4db87f0092dd30a903cdb0c44bad",
                                              "userID":"joel@notifica.re",
                                              "price":0.89,
                                              "application":"5354f0bb3fa544452ff4c7c0",
                                              "transactionIdentifier":"1000000133399653",
                                              "currency":"EUR"
                                           }


# Group Region
Methods to manage your regions. Regions are geo-fences that can eventually have Triggers and/or Beacons. 
When none are created your region will just gather the session data as users enter and leave that area or are in the range of your beacons.
You can have a combination of Triggers and Beacons or just one of them. Note that iBeacon technology requires users to turn on Bluetooth to work.


## Regions [/region{?limit,skip}]

### Get all regions for an application [GET]
Get all regions for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip
    

+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }

## Search Regions [/region/search/{search}{?limit,skip}]

### Search regions for an application [GET]
Search regions for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + search (required, string, `My`)...Search matching a name of an active region.

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }

## Regions by Timezone [/region/fortimezone/{timezone}{?limit,skip}]

### Search regions by timezone for an application [GET]
Search regions by timezone for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + timezone (required, string, `Europe`)...The timezone you want to search regions for.

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }

## Regions by Country [/region/forcountry/{country}{?limit,skip}]

### Search regions by timezone for an application [GET]
Search regions by timezone for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + country (required, string, `NL`)...The country you want to search regions for.

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":[
                            {
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
                ]
        }


## New Region [/region]

### Create a new region [POST]
Create a new region. To retrieve a timezone from the coordinates you can use https://developers.google.com/maps/documentation/timezone/.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters
    + name (required, string, `"Flagship Store"`)...The name for the region.
    + tags (optional, array, `["Street Store", "Flagship Store"]`)...The list of tags this region should be associated with.
    + icon (optional, string, `"https://push.notifica.re/upload/..."`)...The icon used for this region. Must be a publicly accessible URL.
    + category (required, string, `"fence"`)...The category of this region. Regions should be categorised as fence to be used as monitored geo-zones. There's also the possibility to mark regions as poi, city and country. These type of regions will not be monitored.
    + major (optional, number, `123456`)...The major identifier for the region. If you intend to use beacons this field must match the major identifier for your beacons.
    + address (optional, string, `"Marconistraat 16"`)...The address for this region. This field is merely informative.
    + referenceKey (optional, string, `"123456"`)...The foreign key for this region. This field is can be used to match regions in other systems.
    + description (optional, string, `"This is a nice text for a description"`)...The description for this region. This field is merely informative.
    + geometry (optional, GeoJSON, `{"type": "Point","coordinates": [4.2345,5.6789]}`)...The geometry for this region. If no advancedGeometry is used, this field is mandatory.
    + advancedGeometry (optional, GeoJSON, `{"type": "Polygon","coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]}`)...The advanced geometry for this region. If included, the geometry field is optional and will be automatically calculated for you.
    + distance = `100` (optional, number, `200`)...The radius of a circle for the region. This field is required if geometry is being passed. If advancedGeometry is used then this field will be automatically calculated for you.

+ Request (application/json)

        {
                "name": "Flagship Store",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "distance": 200
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "region":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }





## Region [/region/{region}]

### Get a region object [GET]
Get a region object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "regions":{
                                  "_id":"5245bc5b3e66a3b01f0024d4",
                                  "name": "My Region",
                                  "geometry": {
                                               "type": "Point",
                                               "coordinates": [4.2345,5.6789]
                                  },
                                  "major": "123456",
                                  "timezone": "Europe/Amsterdam"
                            }
        }


### Modify a region [PUT]
Modify a region.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters
    + name (required, string, `"Flagship Store"`)...The name for the region.
    + tags (optional, array, `["Street Store", "Flagship Store"]`)...The list of tags this region should be associated with.
    + icon (optional, string, `"https://push.notifica.re/upload/..."`)...The icon used for this region. Must be a publicly accessible URL.
    + category  (optional, string, `"fence"`)...The category of this region. Regions should be categorised as fence to be used as monitored geo-zones. There's also the possibility to mark regions as poi, city and country. These type of regions will not be monitored.
    + major (optional, number, `123456`)...The major identifier for the region. If you intend to use beacons this field must match the major identifier for your beacons.
    + address (optional, string, `"Marconistraat 16"`)...The address for this region. This field is merely informative.
    + referenceKey (optional, string, `123456`)...The foreign key for this region. This field is can be used to match regions in other systems.
    + description (optional, string, `"This is a nice text for a description"`)...The description for this region. This field is merely informative.
    + geometry (optional, GeoJSON, `{"type": "Point","coordinates": [4.2345,5.6789]}`)...The geometry for this region. If no advancedGeometry is used, this field is mandatory.
    + advancedGeometry (optional, GeoJSON, `{"type": "Polygon","coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]}`)...The advanced geometry for this region. If included, the geometry field is optional and will be automatically calculated for you.
    + distance (optional, number, `200`)...The radius of a circle for the region. This field is required if geometry is being passed. If advancedGeometry is used then this field will be automatically calculated for you.


+ Request (application/json)

        {
                "name": "My Region",
                "geometry": {
                             "type": "Point",
                             "coordinates": [4.2345,5.6789]
                },
                "distance": 200
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region updated"
        }


### Delete a region [DELETE]
Delete a region. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + region (required, string, `5245bc5b3e66a3b01f0024d4`)...The region id of an active region.


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region deleted"
        }


## Delete All Regions [/region/all]

### Delete all regions [DELETE]
Delete all regions, including attached triggers and beacons. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Response 200 (application/json; charset=utf-8)

        {
                "message":"region deleted"
        }


# Group Reply
A Reply object is what Notificare creates when users interact with notifications with actions. 
These objects hold every single interaction and data your users send you.


## Replies [/reply/fornotification/{notification}{?limit,skip}]

### Get all replies for a specific notification [GET]
Get all replies for a specific notification.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + notification (required, string, `5245bc5b3e66a3b01f0024d4`)...The notification id of an active notification.

    + limit = `1000` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)


        {
                "replies":[
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            },
                            {
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z" 
                            }
                ],
                "count": 2
        }

## Reply [/reply/{reply}]

### Get a specific reply object [GET]
Get a specific reply object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + reply (required, string, `5245bc5b3e66a3b01f0024d4`)...The id for this reply.


+ Response 200 (application/json; charset=utf-8)


        {
                "reply":{
                              "notification":"53317011f90827d27c6e9c94",
                              "userID":"testuser@example.com",
                              "deviceID":"APA91bHWwt97wwvZ1-P8UQT1zCgczK7utZEZiqu7N4Awg",
                              "label":"yes",
                              "_id":"5331703332c17e3077d5a765",
                              "time":"2014-03-25T12:01:55.713Z"
                            }
        }



# Group Application Stats
Methods to retrieve usage reports of application resources in the API. 
These requests must be authenticated with the `applicationKey` and `masterSecret`.


## Last month device stats based on specific dimensions [/stats/device/{dimension}/lastmonth]

### Retrieve last 30 days devices by dimension [GET]
Retrieve the number of devices of a certain dimension for the last 30 days.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## Retrieve one single year of device stats by dimension [/stats/device/{dimension}/{year}]

### Retrieve one single year of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific year.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + year (required, string, `2014`)...The year you desire to get stats from.

+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }


## Retrieve one single month of device stats by dimension [/stats/device/{dimension}/{year}/{month}]

### Retrieve one single month of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific month.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }



## Retrieve one single day of device stats by dimension [/stats/device/{dimension}/{year}/{month}/{day}]

### Retrieve one single day of device stats by dimension [GET]
Retrieve the number of devices of a certain dimension in a specific day.

### Dimensions:

***
osVersion
***
appVersion
***
language
***
sdkVersion
***
platform
***
osString
***
deviceString
***

+ Parameters

    + dimension (required, string, `osVersion`)...The desired dimension.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
        
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z",
                            "value":"2.3.6"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z",
                            "value":"2.3.6"
                          }
                          ...
                ]
        }

## Retrieve total events of a certain type [/stats/event/{type}/total]

### Retrieve last month event stats of a certain type [GET]
Retrieve the number of events of a certain type.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":1000
                          }
                          ...
                ]
        }

## Retrieve last month events of a certain type [/stats/event/{type}/lastmonth]

### Retrieve last month event stats of a certain type [GET]
Retrieve the number of events of a certain type for the last 30 days.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }

## Retrieve last week events of a certain type [/stats/event/{type}/lastweek]

### Retrieve last week event stats of a certain type [GET]
Retrieve the number of events of a certain type for the last 7 days.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }

## Retrieve yearly event stats of a certain type [/stats/event/{type}]

### Retrieve yearly event stats of a certain type [GET]
Retrieve the number of events of a certain type per year.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + year (required, string, `2014`)...The year you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-01-01T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2015-01-01T00:00:00.000Z"
                          }
                          ...
                ]
        }

## Retrieve one single year event stats of a certain type [/stats/event/{type}/{year}]

### Retrieve one single year event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific year.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + year (required, string, `2014`)...The year you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve one single month event stats of a certain type [/stats/event/{type}/{year}/{month}]

### Retrieve one single month event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific month.


### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve one single year event stats of a certain type [/stats/event/{type}/{year}/{month}/{day}]

### Retrieve one single year event stats of a certain type [GET]
Retrieve the number of events of a certain type for a specific day.

### Events
***
re.notifica.event.application.Install
***
re.notifica.event.application.Uninstall
***
re.notifica.event.application.Open
***
re.notifica.event.application.Close
***
re.notifica.event.notification.Influenced
***
re.notifica.event.notification.Receive
***
re.notifica.event.notification.Open
***
re.notifica.event.region.Session
***
re.notifica.event.beacon.Session
***


+ Parameters

    + type (required, string, `re.notifica.event.application.Install`)...The event type.
    + year (required, string, `2014`)...The year you desire to get stats from.
    + month (required, string, `03`)...The month you desire to get stats from.
    + day (required, string, `01`)...The day you desire to get stats from.
    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "count":2,
                            "date":"2014-02-27T00:00:00.000Z"
                          },
                          {
                            "count":2,
                            "date":"2014-02-26T00:00:00.000Z"
                          }
                          ...
                ]
        }


## Retrieve last month notification stats [/stats/notification/application/lastmonth]

### Retrieve last month notification stats [GET]
Retrieve the number of notifications sent on the last 30 days.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


## Retrieve one single year notification stats [/stats/notification/application/{year}]

### Retrieve one single year of notification stats [GET]
Retrieve the number of notifications sent on a specific year.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "month":2,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single month notification stats [/stats/notification/application/{year}/{month}]

### Retrieve one single month of notification stats [GET]
Retrieve the number of notifications sent on a specific month.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "day":2,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single day notification stats [/stats/notification/application/{year}/{month}/{day}]

### Retrieve one single day of notification stats [GET]
Retrieve the number of notifications sent on a specific day.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "hour": 0,
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-01-01T01:00:00.000Z",
                            "hour":1,
                            "day":1,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }


## Retrieve total number of users in an application [/stats/user/application]

### Retrieve total number of user in an application [GET]
Retrieve the total number of users in an application.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":{
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          }
        }



## Retrieve last month user stats for an application [/stats/user/application/lastmonth]

### Retrieve last month user stats for an application [GET]
Retrieve the number of users in an application on the last 30 days.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


## Retrieve one single year of user stats for an application [/stats/user/application/{year}]

### Retrieve one single year of user stats for an application [GET]
Retrieve the number of users in an application for a specific year.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "month":2,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single month of user stats for an application [/stats/user/application/{year}/{month}]

### Retrieve one single month of user stats for an application [GET]
Retrieve the number of users in an application for a specific month.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "day":2,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single day user stats for an application [/stats/user/application/{year}/{month}/{day}]

### Retrieve one single day of user stats for an application [GET]
Retrieve the number of user in an application for a specific day.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "hour": 0,
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-01-01T01:00:00.000Z",
                            "hour":1,
                            "day":1,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }


# Group Account Stats
Methods to retrieve usage reports of account resources in the API. 
These requests must be authenticated with the `token`.

## Retrieve last month notification stats [/stats/notification/account/lastmonth]

### Retrieve last month notification stats [GET]
Retrieve the number of notifications sent on the last 30 days.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


## Retrieve one single year notification stats [/stats/notification/account/{year}]

### Retrieve one single year of notification stats [GET]
Retrieve the number of notifications sent on a specific year.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "month":2,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single month notification stats [/stats/notification/account/{year}/{month}]

### Retrieve one single month of notification stats [GET]
Retrieve the number of notifications sent on a specific month.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "day":2,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single day notification stats [/stats/notification/account/{year}/{month}/{day}]

### Retrieve one single day of notification stats [GET]
Retrieve the number of notifications sent on a specific day.

    
+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "hour": 0,
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-01-01T01:00:00.000Z",
                            "hour":1,
                            "day":1,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }


## Retrieve total number of users [/stats/user/account]

### Retrieve last month user stats [GET]
Retrieve the total number of users in your account.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":{
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28
                          }
        }



## Retrieve last month user stats [/stats/user/account/lastmonth]

### Retrieve last month user stats [GET]
Retrieve the number of users in your account on the last 30 days.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "date":"2014-02-28T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":0,
                            "day":28,
                            "application":"50b62e6aebe6dd821d000003"
                          },
                          {
                            "date":"2014-02-27T00:00:00.000Z",
                            "year":2014,
                            "month":2,
                            "count":2,
                            "day":27,
                            "application":"50b62e6aebe6dd821d000003"
                          }
                          ...
                ]
        }


## Retrieve one single year of user stats [/stats/user/account/{year}]

### Retrieve one single year of user stats [GET]
Retrieve the number of users in your account for a specific year.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "month":2,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single month of user stats [/stats/user/account/{year}/{month}]

### Retrieve one single month of user stats [GET]
Retrieve the number of users in your account for a specific month.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-02-01T00:00:00.000Z",
                            "day":2,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }

## Retrieve one single day user stats [/stats/user/account/{year}/{month}/{day}]

### Retrieve one single day of user stats [GET]
Retrieve the number of user in your account for a specific day.


+ Response 200 (application/json; charset=utf-8)

        {
                "stats":[
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":33,
                            "date":"2014-01-01T00:00:00.000Z",
                            "hour": 0,
                            "day":1,
                            "month":1,
                            "year":2014
                          },
                          {
                            "application":"50b62e6aebe6dd821d000003",
                            "count":38,
                            "date":"2014-01-01T01:00:00.000Z",
                            "hour":1,
                            "day":1,
                            "month":1,
                            "year":2014
                          }
                          ...
                ]
        }


# Group Status
Public methods to retrieve information about the status and health of the API 

## Check API Status [/status]

### Get the current availability of the API [GET]
Get the current availability of the API


+ Response 200 (application/json; charset=utf-8)

        {
                "status":"ok"
        }



# Group Tag
Methods to retrieve tags.
Use these methods to retrieve information about device tags for an application.
Management of tags is exclusively made by our SDK libraries therefore you only get access to read operations.

## Tags [/device/tags{?limit,skip}]

### Get the list of all tags for this application [GET]
Get the list of all tags for this application. If skip and limit are not used, there is a default size of 100 devices. Please note that there is a max. size of 1000 devices per page.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip


+ Response 200 (application/json; charset=utf-8)

        {
                "tags":[
                        {"tag":"toys", "deviceCount": 2},
                        {"tag":"kitchen", "deviceCount": 5}
                ],
                "count": 2

        }



## Search Tags [/device/tags/{tag}]

### Search device tags that match partially or totally a specific query [GET]
Get all the tags that match match partially or totally a specific query.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + tag (required, string, `toys`)... The string to search for


+ Response 200 (application/json; charset=utf-8)

        {
                "tags":[
                        {"tag":"toys", "deviceCount": 2},
                        {"tag":"kitchen", "deviceCount": 5}
                ],
                "count": 2

        }


# Group Trigger
Methods to manage your triggers. Triggers are used to send messages when a transition into or out of a region occurs.
There are two types of triggers, Region triggers and Beacon triggers. They are used by regions and beacons to send notifications whenever a device enters/exits a Region or is in the proximity range of a Beacon.

## Trigger Types:
| type | description |
|:---------:|-------------|
| re.notifica.trigger.region.Enter | Device entered a region |
| re.notifica.trigger.region.Exit | Device exited a region |
| re.notifica.trigger.beacon.Enter | Device entered a beacon range |
| re.notifica.trigger.beacon.Exit | Device exited a beacon range |


## Triggers [/trigger{?limit,skip}]

### Get all triggers for an application [GET]
Get all triggers for an application.
This request is authenticated with the `applicationKey` and  `masterSecret`.


+ Parameters

    + limit = `100` (optional, number, `100`)...The maximum number of results to retrieve.
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "triggers":[
                            {
                                  "name": "One Time Welcome",
                                  "type": "re.notifica.trigger.region.Enter",
                                  "frequency": "once",
                                  "interval": 8600,
                                  "notBefore": "",
                                  "notAfter": "",
                                  "dayEnd": "",
                                  "dayStart": "",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [],
                                  "skipDays": [],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": false
                            },
                            {
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                                  "skipDays": [1,2],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
                ],
                "count": 2
        }




## New Trigger [/trigger]

### Create a new trigger [POST]
Create a new trigger. This request expects at least `name`, `type` and `source`.
This request is authenticated with the `applicationKey` and  `masterSecret`.

Three special cases apply:
- if `source` is an array, then this trigger will be added to all regions or beacons in that array
- if `source` is set to `"all"`, then this trigger will be added to all regions or beacons in this application
- if `notification` is an object instead of an id string, a new notification will be created, for each region/beacon if `source` contains multiple sources. See Notifications for the structure of a Notification object.

+ Parameters
    + name (required, string, `My Trigger`)...The name as it appears in the list.
    + type (optional, string, `re.notifica.trigger.region.Enter`)...Defines the type of trigger. Types of triggers are represented by namespaces. Trigger types should be match the following namespace: re.notifica.trigger.*. Please refer to Trigger Types for all available types.
    + frequency = `time` (optional, string,)...How often the trigger should be fired. Can be `once`, `always` or `time`. The latter value requires an interval to be provided.
    + interval = 86400 (optional, number, `86400`)...Minimal interval in seconds before a trigger will be fired again.
    + delayMinutes = 0 (optional, number, `5`)...Trigger will fire after this amount of minutes, if not canceled by the opposite geo-transition.
    + notBefore (optional, date, `2012-11-28T15:31:54`)...Triggers will not fire before this date.
    + notAfter (optional, date, `2014-11-28T15:31:54`)...Triggers will not fire after this date.
    + dayStart (optional, time, `08:00:00`)...Triggers will not fire before this time of day.
    + dayEnd (optional, time, `19:00:00`)...Triggers will not fire after this time of day.
    + skipDays (optional, array, `[1,2]`)...Triggers will not fire on any of these days. Sunday is `0`.
    + source (required, string, `5245bc5b3e66a3b01f0024d4`)...The region or beacon this trigger is attached to. See notes above.
    + active = `false` (optional, boolean, `true`)...This trigger is active or not.
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4a`)...Previously created notification to be sent when trigger is fired. See notes above.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]`)...Rules to be executed upon firing of this trigger. See Notifications for an overview of rules.

+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28 15:31",
                "notAfter": "2014-11-28 15:31",
                "dayEnd": "08:00",
                "dayStart": "19:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                "skipDays": [0,6],
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "_id":"5245bc5b3e66a3b01f0024d4"
                         }
        }



## Trigger [/trigger/{trigger}]

### Get a trigger object [GET]
Get a trigger object.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "trigger":{
                                  "name": "On Store exit",
                                  "type": "re.notifica.trigger.region.Exit",
                                  "frequency": "always",
                                  "interval": 8600,
                                  "notBefore": "2012-11-28T15:31:54",
                                  "notAfter": "2014-11-28T15:31:54",
                                  "dayEnd": "08:00:00",
                                  "dayStart": "19:00:00",
                                  "notification": "5245bc5b3e66a3b01f0024d4",
                                  "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                                  "skipDays": [0,6],
                                  "source": "5245bc5b3e66a3b01f0024d4",
                                  "active": true
                            }
        }



### Modify a trigger [PUT]
Modify a trigger.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id
    + name (required, string, `My Trigger`)...The name as it appears in the list.
    + type (optional, string, `re.notifica.trigger.region.Enter`)...Defines the type of trigger. Types of triggers are represented by namespaces. Trigger types should be match the following namespace: re.notifica.trigger.*. Please refer to Trigger Types for all available types.
    + frequency = `time` (optional, string,)...How often the trigger should be fired. Can be `once`, `always` or `time`. The latter value requires an interval to be provided.
    + interval = 86400 (optional, number, `86400`)...Minimal interval in seconds before a trigger will be fired again.
    + delayMinutes = 0 (optional, number, `5`)...Trigger will fire after this amount of minutes, if not canceled by the opposite geo-transition.
    + notBefore (optional, date, `2012-11-28T15:31:54`)...Triggers will not fire before this date.
    + notAfter (optional, date, `2014-11-28T15:31:54`)...Triggers will not fire after this date.
    + dayStart (optional, time, `08:00:00`)...Triggers will not fire before this time of day.
    + dayEnd (optional, time, `19:00:00`)...Triggers will not fire after this time of day.
    + skipDays (optional, array, `[1,2]`)...Triggers will not fire on any of these days. Sunday is `0`.
    + source (required, string, `5245bc5b3e66a3b01f0024d4`)...The region or beacon this trigger is attached to. See notes above.
    + active = `false` (optional, boolean, `true`)...This trigger is active or not.
    + notification (optional, string, `5245bc5b3e66a3b01f0024d4a`)...Previously created notification to be sent when trigger is fired. See notes above.
    + rules (optional, array, `[{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}]`)...Rules to be executed upon firing of this trigger. See Notifications for an overview of rules.


+ Request (application/json)

        {
                "name": "My Trigger",
                "type": "re.notifica.trigger.region.Enter",
                "frequency": "always",
                "interval": 8600,
                "notBefore": "2012-11-28 15:31",
                "notAfter": "2014-11-28 15:31",
                "dayEnd": "08:00",
                "dayStart": "19:00",
                "notification": "5245bc5b3e66a3b01f0024d4",
                "rules": [{"type":"re.notifica.rule.segment.Add", "params":["3445bc5b4563b01f0f5"]}],
                "skipDays": [0,6],
                "source": "5245bc5b3e66a3b01f0024d4",
                "active": false
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger updated"
        }



### Delete Trigger [DELETE]
Delete a trigger. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + trigger (required, string, `5245bc5b3e66a3b01f0024d4`)...The trigger id


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"trigger deleted"
        }


# Group Upload
These methods let you manage files.
All the files you upload to Notificare can be used as content of your notifications, replies, import jobs, WebPush icons and passes.

## New Upload [/upload/{type}]

### Upload a file [POST]
Upload a file to Notificare. The resulting filename is a path inside the notificare storage. This can be used as a reference to the file in other endpoints.
The contents of the file should be in the body of the request and with the correct mime-type. So, e.g. an import should be of type `text/csv`, an image to go with a notification `image/png`, etc.  
This request is authenticated with the `applicationKey` and  `masterSecret`.

### Uploads
***
notification
***
import
***
reply
***
passbook
***
website-push
***

+ Parameters

    + type (required, string, `import`)...The type of the file to upload

+ Request (text/csv)
    userID,userName
    "test@example.com","Test User"
    
+ Response 201 (application/json; charset=utf-8)

        {
                "filename": "/imports/9f.."
        }

## Delete an Upload [/upload/{filename}]

### Delete a file [DELETE]
Delete file from Notificare storage. This operation can not be undone.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + filename (required, string, `/notifications/9f..`)...The url of the file to delete


+ Response 204


# Group User Segment
These methods let you create, change and remove user segments as well as manage add, remove or clear all users from a segment.

## User Segments [/usersegment{?limit,skip}]

### Retrieve a list of segments [GET]
Retrieve a list of segments. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        },
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "name": "newbies",
                                "description": "people who just joined"
                        }
                ],
                "count": 2
        }

## Retrieve a list of segments by name [/usersegment/forname/{name}{?limit,skip}]

### Retrieve a list of segments by name [GET]
Retrieve a list of segments with a name (starting with) `name`. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + name (required, string, `fans`)...The (start of the) name of the segment you are looking for

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                                "userSelectable": "people who like our page on Facebook"
                        }
                ],
                "count": 1
        }

## New User Segment [/usersegment]

### Create a new user segment [POST]
Create a new user segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "id":"5245bc5b3e66a3b01f0024d4"
                }
        }


## New User Segment with a Batch of Users [/usersegment/batch]

### Create a new user segment with a batch of userIDs [POST]
Create a new user segment with a batch of userIDs. There is a limit of 1000 userIDs. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook",
                "users":["user1@notifica.re","user2@notifica.re"]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "id":"5245bc5b3e66a3b01f0024d4"
                }
        }


## Add Batch of Users to User Segment [/usersegment/{segment}/add]

### Add a batch of users to a segment [PUT]
Add users to a segment using a batch of userIDs. There is a limit of 1000 userIDs. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Request (application/json)

        {
                "users":["user1@notifica.re","user2@notifica.re"]
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": 'added users to segment',
                "count": 2
        }

## Remove Batch of Users from User Segment [/usersegment/{segment}/remove]

### Remove a batch of users from a segment [PUT]
Remove users from a segment using a batch of userIDs. There is a limit of 1000 userIDs. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Request (application/json)

        {
                "users":["user1@notifica.re","user2@notifica.re"]
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": 'removed users from segment',
                "count": 2
        }


## Get Users in User Segment [/usersegment/{segment}/users{?limit,skip}]

### Get all users from a segment [GET]
Get all the users in a segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment
    
    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve, max 1000.
    
    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Request (application/json)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": ["5245bc5b3e66a3b01f0024d4"],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": 'removed users from segment',
                "count": 2
        }


## Clear Users from User Segment [/usersegment/{segment}/clear]

### Clear all users from a segment [PUT]
Clear all the users from a segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment


+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment cleared"
        }


## User Segment [/usersegment/{segment}]

### Retrieve a segment [GET]
Retrieve a segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "name": "fans",
                        "description": "people who like our page on Facebook"
                }
        }

### Modify a user segment [PUT]
Change `name` and/or `description` of a user segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment updated"
        }


### Delete a user segment [DELETE]
Delete a user segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment removed"
        }



# Group User
Methods for retrieving (groups of) users. Additionally you can also add and remove them from user segments.

## Users [/user{?limit,skip}]

### List all users for this app [GET]
List all users for this app. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## Retrieve users for a user segment [/user/forsegment/{segment}{?limit,skip}]

### Retrieve users for a user segment [GET]
Retrieve users for a segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## Search Users [/user/search/{search}{?limit,skip}]

### Search users [GET]
Search users by `userName` and `userID`. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + search (required, string, `Mas`)...The search string

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve, max 1000.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "5245bc5b3e66a3b01f0024d4",
                                "account": "5245bc5b3e66a3b01f0024d4",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }


## Retrieve a User [/user/{user}]

### Retrieve a User [GET]
Retrieve a user object. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }


## Deactivate a User [/user/{user}]

### Deactivate a User [DELETE]
Deactivate a user.  The user will no longer be visible in the dashboard.
If the user registers again on one of his devices, he will be activated again. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 204


## Delete a User [/user/{user}/remove]

### Delete a User [DELETE]
Delete a user. The user will be completely removed from our system.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 202 (application/json; charset=utf-8)

        {
            "message": "user removal is being processed"
        }


## Retrieve a User by userID [/user/foruserid/{userid}]

### Retrieve a User by userID [GET]
Retrieve a user object using the `userID`. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + userid (required, string, `12345`)...The app-specific userID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "5245bc5b3e66a3b01f0024d4",
                        "account": "5245bc5b3e66a3b01f0024d4",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }


## Deactivate a User by userID [/user/foruserid/{userid}]

### Deactivate a User by userID [DELETE]
Deactivate a user using the  `userID`. The user will no longer be visible in the dashboard.
If the user registers again on one of his devices, he will be activated again. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + userid (required, string, `12345`)...The userID of the user

+ Response 204


## Delete a User by userID [/user/foruserid/{userid}/remove]

### Delete a User by userID [DELETE]
Delete a user using the  `userID`. The user will be completely removed from our system.
This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + userid (required, string, `12345`)...The userID of the user

+ Response 202 (application/json; charset=utf-8)

        {
            "message": "user removal is being processed"
        }

## Add user to segment [/user/{user}/add/{segment}]

### Add user to segment [PUT]
Add user to segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user added to segment"
        }

## Remove user from segment [/user/{user}/remove/{segment}]

### Remove user from segment [PUT]
Remove user from segment. This request is authenticated with the `applicationKey` and  `masterSecret`.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user removed from segment"
        }


