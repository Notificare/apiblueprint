FORMAT: 1A
HOST: https://push.notifica.re/

# Notificare REST API
Unified remote push notifications and location services for iOS, Android and HTML5 apps. 
Create user profiles, categorize your users and devices, create/schedule any content-rich and actionable notification. 
Use Geo-Targeting, Geo-Fencing or iBeacon technology to provide the ultimate messaging experience. Sign up for free here: https://dashboard.notifica.re/#/sign-up

# Group Account
Method to retrieve your account object. 
Includes the `token` that will be required to create and manage applications and get global stats about your account.


## /account/foremail/{email}

+ Parameters

    + email (required, string, `name@domain.com`)...The email used to register the account.


### GET
Retrieve an account object based on credentials. This request must be authenticated with the `email` and `password`.


+ Response 200 (application/json; charset=utf-8)

        {
                "account":{
                            "\_id":"xxxxxxxxxxxxxxxxxxx"
                            "email":"john@doe.com",
                            "name":"John Doe",
                            "subscriptionId":"",
                            "token":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                            "firstTime":true,
                            "registrationDate":"2013-03-01T08:00:00.000Z",
                            "automaticUpgrade":false,
                            "subscription":false,
                            "superAccount":true,
                            "userLimit":5000,
                            "plan":"Free",
                            "accessWarning":false,
                            "blocked":false,
                            "active":true,
                            "billingInfo":{
                                            "company":"Notificare BV",
                                             "firstName":"John",
                                             "lastName":"Doe",
                                             "address1":"Overhoekslein 2",
                                             "address2":"",
                                             "city":"Amsterdam",
                                             "state":"Zuid-Holland",
                                             "country":"NL",
                                             "zipcode":"1031 KS",
                                             "phone":"0854014413",
                                             "vatNumber":"NL851989627B01",
                                             "billingCycle":"monthly"
                                   }
                             }
                }
        }



# Group Application
Methods to manage your applications.

## /application{?limit,skip}

### GET
Get your active applications. This request must be authenticated with the `token`.

+ Parameters

    + limit = `250` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 201 (application/json; charset=utf-8)

        {
                "applications":[
                                 {
                                   "\_id":"12345",
                                   "account": "xxxxxxxxxxx",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }
        


## /application

### POST
Create a new application. This request must be authenticated with the `token`.

+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 201 (application/json; charset=utf-8)

        {
                "application":{
                                  "\_id":"12345"
                              }
        }





## /application/{application}

### GET
Get an application object. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Response 200 (application/json; charset=utf-8)

        {
                "application":{
                                   "\_id":"12345",
                                   "account": "xxxxxxxxxxx",
                                   "applicationKey": "xxxxxxxxxxxxx",
                                   "applicationSecret": "xxxxxxxxxxxx",
                                   "authProviders": [
                                                      {
                                                        "provider": "twitter"
                                                      }
                                                    ],
                                   "masterSecret": "xxxxxxxxxx",
                                   "name": "Your App",
                                   "gcmConfig": {
                                                 "key": "xxxxxxxxxxxxxxxxxxxxx"
                                    },
                                   "apnsConfig": {
                                                   "certificate": "raw certificate",
                                                   "info": {
                                                   "serial": "xxxxxx",
                                                   "subject": {
                                                                "UID": "re.notifica.test",
                                                                "CN": "Apple Development IOS Push Services: re.notifica.test",
                                                                "OU": "XXXXXXXXXX",
                                                                "C": "NL"
                                                    },
                                                    "issuer": {
                                                                "C": "US",
                                                                "O": "Apple Inc.",
                                                                "OU": "Apple Worldwide Developer Relations",
                                                                "CN": "Apple Worldwide Developer Relations Certification Authority"
                                                    },
                                                    "notBefore": "2013-11-25T15:19:10.000Z",
                                                    "notAfter": "2014-11-25T15:19:10.000Z"
                                                 }
                                    },
                                    "regionConfig": {
                                                      "proximityUUID": "f7826da6-4fa2-4e98-8024-bc5b71e0893e"
                                                    },
                                    "locationTtl": 7,
                                    "production": false,
                                    "active": true,
                                    "blocked": false,
                                    "date": "2012-11-28T15:31:54.904Z",
                                    "category": "Other"
                                  }
                ]
        }





## /application/{application}

### PUT
Modify an application. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.


+ Request (application/json)

        {
                "name":"My Amazing App",
                "production": true,
                "category": "Business"
        }


+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application changes saved"
        }



## /application/{application}

### DELETE
Destroy an application. This operation can not be undone. This request must be authenticated with the `token`.

+ Parameters

    + application (required, string, `5245bc5b3e66a3b01f0024d4`)...The account id of an active application.



+ Response 200 (application/json; charset=utf-8)

        {
                "message":"application deactivated"
        }



# Group Notification
Methods to send notifications to a specific target audience. 
Combines User, Segments, Tags and the location of the devices to provide you a powerful device selection query for your campaigns.

## /notification/broadcast

### POST
Send a message to **all** devices. This call must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"12345",
                "message":"notifications are queued"
        }


## /notification/tags

### POST
Send a message to devices with any of the specified `tags`. The request accepts an array of tags. This request must be authenticated with the `applicationKey` and `masterSecret`

+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"12345",
                "message":"notifications are queued"
        }
        
## /notification/segments

### POST
Send a message to users in one or more of the specified `segments`. The request accepts an array of Segment Ids. This request must be authenticated with the `applicationKey` and `masterSecret`

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"12345",
                "message":"notifications are queued"
        }
        
## /notification/user/{user}

### POST
Send a message to a `user`. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"12345",
                "message":"notifications are queued"
        }
        
## /notification/device/{device}

### POST
Send a message to a `device`. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "\_id":"12345",
                "message":"notifications are queued"
        }

# Group Notification Test
Methods to test audience selection. Retrieves current devices based on the specified selection. It does not send any notification.
Combines User, Segments, Tags and the location of the devices the same way Notification does.

## /notification/test/broadcast

### POST
Test a message to **all** devices. This call must be authenticated with the `applicationKey` and `masterSecret`.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/tags

### POST
Test a message to devices with any of the specified `tags`. The call accepts an array of tags. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Request (application/json)

        {
                "tags":["test1","test2"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/segments

### POST
Send a message to users in one or more of the specified `segments`. The call accepts an array of IDs segments. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Request (application/json)

        {
                "segments":["526f7a71dab9d70711000003","526f7a71dab9d70711000004"],
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/user/{user}

### POST
Send a message to a `user`. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Parameters

    + user (required, string, `testuser@example.com`)...The user ID is the one the client device registered with, e.g., the user's email address. 

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }
        
## /notification/test/device/{device}

### POST
Send a message to a `device`. This call must be authenticated with the `applicationKey` and `masterSecret`

+ Parameters

    + device (required, string, `bbff2ce9b547d2df4731bac277...`)...The deviceID is the ID as registered by the device, e.g. APNS token or GCM registration ID.

+ Request (application/json)

        {
                "message":"Hello world!",
                "type":"re.notifica.notification.Alert",
                "ttl":3600,
                "sound":"default",
                "content": [
                        {
                                "type":"re.notifica.content.Text",
                                "data":"Because this long text will never fit inside a simple alert or toast, we send it along as content and it will be automatically displayed when the user opens the notification"
                        }
                ],
                "actions":[
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Please come in"
                        },
                        {
                                "type":"re.notifica.action.Callback",
                                "label":"Go away"
                        }
                ]
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "count":"42"
        }



# Group Status
Public methods to retrieve information about the status and health of the API 

## /status

### GET
Get the current availability of the API


+ Response 200 (application/json; charset=utf-8)

        {
                "status":"ok"
        }



# Group User Segment
These methods let you create, change and remove user segments

## /usersegment{?limit,skip}

### GET
Retrieve a list of segments

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        },
                        {
                                "_id": "54321",
                                "name": "newbies",
                                "description": "people who just joined"
                        }
                ],
                "count": 2
        }

## /usersegment/forname/{name}{?limit,skip}

### GET
Retrieve a list of segments with a name (starting with) `name`

+ Parameters

    + name (required, string, `fans`)...The (start of the) name of the segment you are looking for

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegments": [
                        {
                                "_id": "12345",
                                "name": "fans",
                                "description": "people who like our page on Facebook"
                        }
                ],
                "count": 1
        }

## /usersegment/{segment}

### GET
Retrieve a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "_id": "12345",
                        "name": "fans",
                        "description": "people who like our page on Facebook"
                }
        }

### PUT
Change `name` and/or `description` of a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment updated"
        }

### DELETE
Remove a user segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user segment removed"
        }


## /usersegment

### POST
Create a new user segment

+ Request (application/json)

        {
                "name":"fans",
                "description":"people who like our page on Facebook"
        }

+ Response 201 (application/json; charset=utf-8)

        {
                "userSegment": {
                        "id":"12345"
                }
        }

# Group User
Methods for retrieving (groups of) users and adding / removing them from user segments

## /user{?limit,skip}

### GET
List all users for this app

+ Parameters

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## /user/forsegment/{segment}{?limit,skip}

### GET
List users for a segment

+ Parameters

    + segment (required, string, `12345`)...The ID of the segment

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }

## /user/search/{search}{?limit,skip}

### GET
List all users whose userName starts with `search` or whose userID is equal to `search`

+ Parameters

    + search (required, string, `Mas`)...The search string

    + limit = `25` (optional, number, `10`)...The maximum number of results to retrieve.

    + skip = `0` (optional, number, `0`)...The number of results to skip

+ Response 200 (application/json; charset=utf-8)

        {
                "users": [
                        {
                                "_id": "5245bc5b3e66a3b01f0024d4",
                                "userID": "12345",
                                "userName": "Massimo",
                                "application": "12345",
                                "account": "12345",
                                "segments": [],
                                "autoGenerated": false,
                                "active": true
                        }
                ],
                "count": 1
        }


## /user/{user}

### GET

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "12345",
                        "account": "12345",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }

## DELETE
Deactivate a user. The user will not receive any more notifications. 
If the user registers again on one of his devices, he will be activated again.

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

+ Response 204

## /user/foruserid/{userid}

### GET
Get details for a user

+ Parameters

    + user (required, string, `12345`)...The app-specific userID of the user

+ Response 200 (application/json; charset=utf-8)

        {
                "user:": {
                        "_id": "5245bc5b3e66a3b01f0024d4",
                        "userID": "12345",
                        "userName": "Massimo",
                        "application": "12345",
                        "account": "12345",
                        "segments": [],
                        "autoGenerated": false,
                        "active": true
                }
        }

### DELETE
Deactivate a user. The user will not receive any more notifications. 
If the user registers again on one of his devices, he will be activated again.

+ Parameters

    + user (required, string, `12345`)...The app-specific userID of the user

+ Response 204


## /user/{user}/add/{segment}

### PUT
Add user to segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user added to segment"
        }

## /user/{user}/remove/{segment}

### PUT
Remove user from segment

+ Parameters

    + user (required, string, `5245bc5b3e66a3b01f0024d4`)...The Notificare ID of the user

    + segment (required, string, `5245bc5b3e66a3b01f0024d4`)...The ID of the segment

+ Response 200 (application/json; charset=utf-8)

        {
                "message": "user removed from segment"
        }
